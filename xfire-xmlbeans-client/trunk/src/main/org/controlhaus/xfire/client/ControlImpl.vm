#if ( $package && $package.length() > 0 )package $package;

#end
import java.io.IOException;

import org.apache.beehive.controls.api.bean.Control;
import org.apache.beehive.controls.api.bean.ControlImplementation;

import org.codehaus.xfire.client.ClientHandler;
#if ( $service.isRest() ) 
import org.codehaus.xfire.client.http.RestHttpClient;
#else
import org.codehaus.xfire.client.http.SoapHttpClient;
#end
import org.codehaus.xfire.xmlbeans.client.XMLBeansClientHandler;

import org.apache.xmlbeans.XmlObject;
import org.apache.xmlbeans.XmlOptions;

#foreach ( $import in $service.Imports )
import $import.FullJavaName;
#end

/**
 * Auto-generated client stub for $service.Name.
 *
 * TODO: Use correct SOAP version from WSDL
 */
@ControlImplementation
public class ${implType}
	implements ${interfaceType}
{
    private static final String URL = "$service.Url";
	private static final String ENCODING = "UTF-8";
	
	private XmlOptions options;
	
    public ${implType}()
    {
        options = new XmlOptions();
        options.setCharacterEncoding(ENCODING);
    }	

	public ${implType}(XmlOptions options)
    {
        this.options = options;
    }
    
	public String getServiceUrl()
	{
		return URL;
	}

#foreach ($method in $service.Methods)
#if ($method.ResponseParameters.size() > 1)
  #set( $returnType = "XmlObject[]" )
#else
  #set( $returnType = "$method.ResponseParameters.get(0).Type.ShortJavaName" )
#end
#set( $first = true )
    public $returnType ${method.Name}( #foreach($p in $method.RequestParameters)#if($first) #set($first=false) #else,#end$p.Type.ShortJavaName $p.Name#end )
        throws IOException
    {
        XMLBeansClientHandler handler = new XMLBeansClientHandler(options);
#set( $first = true )
        XmlObject[] request = new XmlObject[] 
        {
#foreach($p in $method.RequestParameters) 			$p.Name#if($first) #set($first=false) #else,#end #end        

		};
		
        handler.setRequest( request );
#if ( !$service.isRest() )        
        SoapHttpClient client = new SoapHttpClient(handler, getHeaderHandler(), getServiceUrl());
#else
        RestHttpClient client = new RestHttpClient(handler, getServiceUrl());
#end
#if ($method.Action)        client.setAction("$method.Action");#end
        client.setEncoding(ENCODING);
        
        client.invoke();
#if ($method.ResponseParameters.size() > 1)
        return handler.getResponse();
#else
        return ($method.ResponseParameters.get(0).Type.ShortJavaName) handler.getResponse()[0];
#end
    }

#end

#if ( !$service.isRest() )
    /**
     * Gets the HeaderHandler.  Override this or fill this in
     * to provide your own HeaderHandler.
     * @return null by default.
     */
    public ClientHandler getHeaderHandler()
    {
    	return null;
    }#end

}
