/*   Copyright 2004 Salesforce.com
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 */

// ------------------------------------------------------------------------------
//  Generated by Weblogic Workshop
//
//  Created on: Thu May 22 16:47:38 MDT 2003
//  By: simingmu
// -----------------------------------------------------------------------------
package pageflow;

import com.bea.wlw.netui.pageflow.Forward;
import com.bea.wlw.netui.pageflow.FormData;
import com.bea.xml.XmlObject;
import com.sforce.soap.enterprise.*;
import com.sforce.soap.enterprise.CreateDocument.Create;
import com.sforce.soap.enterprise.sobject.Account;
import com.sforce.soap.enterprise.sobject.Contact;
import com.sforce.soap.enterprise.sobject.ContactDocument;
import com.sforce.soap.enterprise.sobject.Opportunity;
import com.sforce.soap.enterprise.sobject.SObject;
import java.net.MalformedURLException;
import java.net.URL;
import java.text.NumberFormat;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Currency;

//import sfdcSforceRecordMap.RecordMap;
import java.util.HashMap;
import java.util.Vector;

/**
 *
 * @jpf:forward name="error" path="error.jsp"
 * @jpf:view-properties view-properties::
 * <!-- This data is auto-generated. Hand-editing this section is not recommended. -->
 * <view-properties>
 * <pageflow-object id="pageflow:/pageflow/sforceController.jpf"/>
 * <pageflow-object id="action:begin.do">
 *   <property value="20" name="x"/>
 *   <property value="60" name="y"/>
 * </pageflow-object>
 * <pageflow-object id="action:Login.do#pageflow.sforceController.LoginForm">
 *   <property value="220" name="x"/>
 *   <property value="60" name="y"/>
 * </pageflow-object>
 * <pageflow-object id="action:GetCustomers.do">
 *   <property value="120" name="x"/>
 *   <property value="400" name="y"/>
 * </pageflow-object>
 * <pageflow-object id="action:GetCustomerDetail.do">
 *   <property value="520" name="x"/>
 *   <property value="480" name="y"/>
 * </pageflow-object>
 * <pageflow-object id="action:GetOpportunities.do">
 *   <property value="320" name="x"/>
 *   <property value="620" name="y"/>
 * </pageflow-object>
 * <pageflow-object id="action:Logout.do">
 *   <property value="260" name="x"/>
 *   <property value="260" name="y"/>
 * </pageflow-object>
 * <pageflow-object id="action:emailCancelAction.do#pageflow.sforceController.EmailActionForm">
 *   <property value="80" name="x"/>
 *   <property value="140" name="y"/>
 * </pageflow-object>
 * <pageflow-object id="action:emailAction.do#pageflow.sforceController.EmailActionForm">
 *   <property value="860" name="x"/>
 *   <property value="300" name="y"/>
 * </pageflow-object>
 * <pageflow-object id="action:prepareEmail.do">
 *   <property value="740" name="x"/>
 *   <property value="140" name="y"/>
 * </pageflow-object>
 * <pageflow-object id="action:newContact.do">
 *   <property value="520" name="x"/>
 *   <property value="40" name="y"/>
 * </pageflow-object>
 * <pageflow-object id="action:createContact.do#pageflow.sforceController.ContactForm">
 *   <property value="760" name="x"/>
 *   <property value="40" name="y"/>
 * </pageflow-object>
 * <pageflow-object id="page:error.jsp">
 *   <property value="340" name="x"/>
 *   <property value="80" name="y"/>
 * </pageflow-object>
 * <pageflow-object id="action-call:@page:index.jsp@#@action:Login.do#pageflow.sforceController.LoginForm@">
 *   <property value="136,160,160,184" name="elbowsX"/>
 *   <property value="52,52,52,52" name="elbowsY"/>
 *   <property value="East_1" name="fromPort"/>
 *   <property value="West_1" name="toPort"/>
 * </pageflow-object>
 * <pageflow-object id="page:index.jsp">
 *   <property value="100" name="x"/>
 *   <property value="60" name="y"/>
 * </pageflow-object>
 * <pageflow-object id="action-call:@page:customerSummary.jsp@#@action:GetCustomerDetail.do@">
 *   <property value="296,390,390,484" name="elbowsX"/>
 *   <property value="392,392,472,472" name="elbowsY"/>
 *   <property value="East_1" name="fromPort"/>
 *   <property value="West_1" name="toPort"/>
 * </pageflow-object>
 * <pageflow-object id="action-call:@page:customerSummary.jsp@#@action:GetOpportunities.do@">
 *   <property value="260,260,272,284" name="elbowsX"/>
 *   <property value="444,601,601,601" name="elbowsY"/>
 *   <property value="South_1" name="fromPort"/>
 *   <property value="West_0" name="toPort"/>
 * </pageflow-object>
 * <pageflow-object id="action-call:@page:customerSummary.jsp@#@action:Logout.do@">
 *   <property value="260,260,260,260" name="elbowsX"/>
 *   <property value="356,330,330,304" name="elbowsY"/>
 *   <property value="North_1" name="fromPort"/>
 *   <property value="South_1" name="toPort"/>
 * </pageflow-object>
 * <pageflow-object id="action-call:@page:customerSummary.jsp@#@action:GetCustomers.do@">
 *   <property value="224,190,190,156" name="elbowsX"/>
 *   <property value="392,392,381,381" name="elbowsY"/>
 *   <property value="West_1" name="fromPort"/>
 *   <property value="East_0" name="toPort"/>
 * </pageflow-object>
 * <pageflow-object id="page:customerSummary.jsp">
 *   <property value="260" name="x"/>
 *   <property value="400" name="y"/>
 * </pageflow-object>
 * <pageflow-object id="action-call:@page:customerDetail.jsp@#@action:newContact.do@">
 *   <property value="520,520,520,520" name="elbowsX"/>
 *   <property value="96,90,90,84" name="elbowsY"/>
 *   <property value="North_1" name="fromPort"/>
 *   <property value="South_1" name="toPort"/>
 * </pageflow-object>
 * <pageflow-object id="action-call:@page:customerDetail.jsp@#@action:GetOpportunities.do@">
 *   <property value="484,420,420,356" name="elbowsX"/>
 *   <property value="143,143,612,612" name="elbowsY"/>
 *   <property value="West_2" name="fromPort"/>
 *   <property value="East_1" name="toPort"/>
 * </pageflow-object>
 * <pageflow-object id="action-call:@page:customerDetail.jsp@#@action:prepareEmail.do@">
 *   <property value="556,630,630,704" name="elbowsX"/>
 *   <property value="132,132,132,132" name="elbowsY"/>
 *   <property value="East_1" name="fromPort"/>
 *   <property value="West_1" name="toPort"/>
 * </pageflow-object>
 * <pageflow-object id="action-call:@page:customerDetail.jsp@#@action:GetCustomerDetail.do@">
 *   <property value="520,520,520,520" name="elbowsX"/>
 *   <property value="184,310,310,436" name="elbowsY"/>
 *   <property value="South_1" name="fromPort"/>
 *   <property value="North_1" name="toPort"/>
 * </pageflow-object>
 * <pageflow-object id="action-call:@page:customerDetail.jsp@#@action:GetCustomers.do@">
 *   <property value="484,320,320,156" name="elbowsX"/>
 *   <property value="132,132,381,381" name="elbowsY"/>
 *   <property value="West_1" name="fromPort"/>
 *   <property value="East_0" name="toPort"/>
 * </pageflow-object>
 * <pageflow-object id="action-call:@page:customerDetail.jsp@#@action:Logout.do@">
 *   <property value="484,390,390,296" name="elbowsX"/>
 *   <property value="121,121,252,252" name="elbowsY"/>
 *   <property value="West_0" name="fromPort"/>
 *   <property value="East_1" name="toPort"/>
 * </pageflow-object>
 * <pageflow-object id="page:customerDetail.jsp">
 *   <property value="520" name="x"/>
 *   <property value="140" name="y"/>
 * </pageflow-object>
 * <pageflow-object id="action-call:@page:customerOpportunities.jsp@#@action:GetOpportunities.do@">
 *   <property value="156,220,220,284" name="elbowsX"/>
 *   <property value="543,543,601,601" name="elbowsY"/>
 *   <property value="East_2" name="fromPort"/>
 *   <property value="West_0" name="toPort"/>
 * </pageflow-object>
 * <pageflow-object id="action-call:@page:customerOpportunities.jsp@#@action:GetCustomerDetail.do@">
 *   <property value="156,320,320,484" name="elbowsX"/>
 *   <property value="532,532,483,483" name="elbowsY"/>
 *   <property value="East_1" name="fromPort"/>
 *   <property value="West_2" name="toPort"/>
 * </pageflow-object>
 * <pageflow-object id="action-call:@page:customerOpportunities.jsp@#@action:GetCustomers.do@">
 *   <property value="120,120,120,120" name="elbowsX"/>
 *   <property value="496,470,470,444" name="elbowsY"/>
 *   <property value="North_1" name="fromPort"/>
 *   <property value="South_1" name="toPort"/>
 * </pageflow-object>
 * <pageflow-object id="action-call:@page:customerOpportunities.jsp@#@action:Logout.do@">
 *   <property value="156,190,190,224" name="elbowsX"/>
 *   <property value="521,521,252,252" name="elbowsY"/>
 *   <property value="East_0" name="fromPort"/>
 *   <property value="West_1" name="toPort"/>
 * </pageflow-object>
 * <pageflow-object id="page:customerOpportunities.jsp">
 *   <property value="120" name="x"/>
 *   <property value="540" name="y"/>
 * </pageflow-object>
 * <pageflow-object id="action-call:@page:emailPage.jsp@#@action:emailAction.do#pageflow.sforceController.EmailActionForm@">
 *   <property value="776,800,800,824" name="elbowsX"/>
 *   <property value="292,292,292,292" name="elbowsY"/>
 *   <property value="East_1" name="fromPort"/>
 *   <property value="West_1" name="toPort"/>
 * </pageflow-object>
 * <pageflow-object id="page:emailPage.jsp">
 *   <property value="740" name="x"/>
 *   <property value="300" name="y"/>
 * </pageflow-object>
 * <pageflow-object id="action-call:@page:newContact.jsp@#@action:GetCustomerDetail.do@">
 *   <property value="604,580,580,556" name="elbowsX"/>
 *   <property value="43,43,461,461" name="elbowsY"/>
 *   <property value="West_2" name="fromPort"/>
 *   <property value="East_0" name="toPort"/>
 * </pageflow-object>
 * <pageflow-object id="action-call:@page:newContact.jsp@#@action:createContact.do#pageflow.sforceController.ContactForm@">
 *   <property value="676,700,700,724" name="elbowsX"/>
 *   <property value="32,32,32,32" name="elbowsY"/>
 *   <property value="East_1" name="fromPort"/>
 *   <property value="West_1" name="toPort"/>
 * </pageflow-object>
 * <pageflow-object id="page:newContact.jsp">
 *   <property value="640" name="x"/>
 *   <property value="40" name="y"/>
 * </pageflow-object>
 * <pageflow-object id="forward:path#success#index.jsp#@action:begin.do@">
 *   <property value="56,60,60,64" name="elbowsX"/>
 *   <property value="52,52,52,52" name="elbowsY"/>
 *   <property value="East_1" name="fromPort"/>
 *   <property value="West_1" name="toPort"/>
 *   <property value="success" name="label"/>
 * </pageflow-object>
 * <pageflow-object id="forward:path#success#GetCustomers.do#@action:Login.do#pageflow.sforceController.LoginForm@">
 *   <property value="184,170,170,156" name="elbowsX"/>
 *   <property value="63,63,392,392" name="elbowsY"/>
 *   <property value="West_2" name="fromPort"/>
 *   <property value="East_1" name="toPort"/>
 *   <property value="success" name="label"/>
 * </pageflow-object>
 * <pageflow-object id="forward:path#error#error.jsp#@action:Login.do#pageflow.sforceController.LoginForm@">
 *   <property value="256,280,280,304" name="elbowsX"/>
 *   <property value="52,52,72,72" name="elbowsY"/>
 *   <property value="East_1" name="fromPort"/>
 *   <property value="West_1" name="toPort"/>
 *   <property value="error" name="label"/>
 * </pageflow-object>
 * <pageflow-object id="forward:path#success#customerSummary.jsp#@action:GetCustomers.do@">
 *   <property value="156,190,190,224" name="elbowsX"/>
 *   <property value="403,403,403,403" name="elbowsY"/>
 *   <property value="East_2" name="fromPort"/>
 *   <property value="West_2" name="toPort"/>
 *   <property value="success" name="label"/>
 * </pageflow-object>
 * <pageflow-object id="forward:path#success#customerDetail.jsp#@action:GetCustomerDetail.do@">
 *   <property value="520,520,520,520" name="elbowsX"/>
 *   <property value="436,310,310,184" name="elbowsY"/>
 *   <property value="North_1" name="fromPort"/>
 *   <property value="South_1" name="toPort"/>
 *   <property value="success" name="label"/>
 * </pageflow-object>
 * <pageflow-object id="forward:path#success#customerOpportunities.jsp#@action:GetOpportunities.do@">
 *   <property value="284,120,120,120" name="elbowsX"/>
 *   <property value="623,623,603,584" name="elbowsY"/>
 *   <property value="West_2" name="fromPort"/>
 *   <property value="South_1" name="toPort"/>
 *   <property value="success" name="label"/>
 * </pageflow-object>
 * <pageflow-object id="forward:path#success#index.jsp#@action:Logout.do@">
 *   <property value="224,180,180,136" name="elbowsX"/>
 *   <property value="241,241,52,52" name="elbowsY"/>
 *   <property value="West_0" name="fromPort"/>
 *   <property value="East_1" name="toPort"/>
 *   <property value="success" name="label"/>
 * </pageflow-object>
 * <pageflow-object id="forward:path#success#GetCustomerDetail.do#@action:emailCancelAction.do#pageflow.sforceController.EmailActionForm@">
 *   <property value="116,300,300,484" name="elbowsX"/>
 *   <property value="132,132,472,472" name="elbowsY"/>
 *   <property value="East_1" name="fromPort"/>
 *   <property value="West_1" name="toPort"/>
 *   <property value="success" name="label"/>
 * </pageflow-object>
 * <pageflow-object id="forward:path#success#GetCustomerDetail.do#@action:emailAction.do#pageflow.sforceController.EmailActionForm@">
 *   <property value="824,690,690,556" name="elbowsX"/>
 *   <property value="303,303,461,461" name="elbowsY"/>
 *   <property value="West_2" name="fromPort"/>
 *   <property value="East_0" name="toPort"/>
 *   <property value="success" name="label"/>
 * </pageflow-object>
 * <pageflow-object id="forward:path#success#emailPage.jsp#@action:prepareEmail.do@">
 *   <property value="740,740,740,740" name="elbowsX"/>
 *   <property value="184,220,220,256" name="elbowsY"/>
 *   <property value="South_1" name="fromPort"/>
 *   <property value="North_1" name="toPort"/>
 *   <property value="success" name="label"/>
 * </pageflow-object>
 * <pageflow-object id="forward:path#success#newContact.jsp#@action:newContact.do@">
 *   <property value="556,580,580,604" name="elbowsX"/>
 *   <property value="32,32,32,32" name="elbowsY"/>
 *   <property value="East_1" name="fromPort"/>
 *   <property value="West_1" name="toPort"/>
 *   <property value="success" name="label"/>
 * </pageflow-object>
 * <pageflow-object id="forward:path#success#GetCustomerDetail.do#@action:createContact.do#pageflow.sforceController.ContactForm@">
 *   <property value="724,640,640,556" name="elbowsX"/>
 *   <property value="43,43,472,472" name="elbowsY"/>
 *   <property value="West_2" name="fromPort"/>
 *   <property value="East_1" name="toPort"/>
 *   <property value="success" name="label"/>
 * </pageflow-object>
 * <pageflow-object id="forward:path#error#error.jsp#@action:createContact.do#pageflow.sforceController.ContactForm@">
 *   <property value="724,550,550,376" name="elbowsX"/>
 *   <property value="21,21,72,72" name="elbowsY"/>
 *   <property value="West_0" name="fromPort"/>
 *   <property value="East_1" name="toPort"/>
 *   <property value="error" name="label"/>
 * </pageflow-object>
 * <pageflow-object id="control:org.controlhaus.sforce.sforce3_0Enterprise#sForce">
 *   <property value="26" name="x"/>
 *   <property value="34" name="y"/>
 * </pageflow-object>
 * <pageflow-object id="control:pageflow.Email#emailContactControl">
 *   <property value="56" name="x"/>
 *   <property value="34" name="y"/>
 * </pageflow-object>
 * <pageflow-object id="formbeanprop:pageflow.sforceController.LoginForm#username#java.lang.String"/>
 * <pageflow-object id="formbeanprop:pageflow.sforceController.LoginForm#password#java.lang.String"/>
 * <pageflow-object id="formbean:pageflow.sforceController.LoginForm"/>
 * <pageflow-object id="formbeanprop:pageflow.sforceController.AccountForm#contacts#pageflow.sforceController.ContactForm[]"/>
 * <pageflow-object id="formbeanprop:pageflow.sforceController.AccountForm#opportunities#pageflow.sforceController.OpportunityForm[]"/>
 * <pageflow-object id="formbeanprop:pageflow.sforceController.AccountForm#id#java.lang.String"/>
 * <pageflow-object id="formbeanprop:pageflow.sforceController.AccountForm#name#java.lang.String"/>
 * <pageflow-object id="formbeanprop:pageflow.sforceController.AccountForm#rating#java.lang.String"/>
 * <pageflow-object id="formbeanprop:pageflow.sforceController.AccountForm#industry#java.lang.String"/>
 * <pageflow-object id="formbeanprop:pageflow.sforceController.AccountForm#billingCity#java.lang.String"/>
 * <pageflow-object id="formbeanprop:pageflow.sforceController.AccountForm#billingState#java.lang.String"/>
 * <pageflow-object id="formbeanprop:pageflow.sforceController.AccountForm#accountNumber#java.lang.String"/>
 * <pageflow-object id="formbeanprop:pageflow.sforceController.AccountForm#site#java.lang.String"/>
 * <pageflow-object id="formbeanprop:pageflow.sforceController.AccountForm#type#java.lang.String"/>
 * <pageflow-object id="formbeanprop:pageflow.sforceController.AccountForm#accountPhone#java.lang.String"/>
 * <pageflow-object id="formbeanprop:pageflow.sforceController.AccountForm#url#java.lang.String"/>
 * <pageflow-object id="formbeanprop:pageflow.sforceController.AccountForm#ticker#java.lang.String"/>
 * <pageflow-object id="formbeanprop:pageflow.sforceController.AccountForm#ownership#java.lang.String"/>
 * <pageflow-object id="formbeanprop:pageflow.sforceController.AccountForm#employees#java.lang.String"/>
 * <pageflow-object id="formbeanprop:pageflow.sforceController.AccountForm#billingStreet#java.lang.String"/>
 * <pageflow-object id="formbeanprop:pageflow.sforceController.AccountForm#billingPostalCode#java.lang.String"/>
 * <pageflow-object id="formbeanprop:pageflow.sforceController.AccountForm#billingCountry#java.lang.String"/>
 * <pageflow-object id="formbean:pageflow.sforceController.AccountForm"/>
 * <pageflow-object id="formbeanprop:pageflow.sforceController.ContactForm#contact#com.sforce.soap.enterprise.sobject.Contact"/>
 * <pageflow-object id="formbeanprop:pageflow.sforceController.ContactForm#salutation#java.lang.String"/>
 * <pageflow-object id="formbeanprop:pageflow.sforceController.ContactForm#firstName#java.lang.String"/>
 * <pageflow-object id="formbeanprop:pageflow.sforceController.ContactForm#lastName#java.lang.String"/>
 * <pageflow-object id="formbeanprop:pageflow.sforceController.ContactForm#department#java.lang.String"/>
 * <pageflow-object id="formbeanprop:pageflow.sforceController.ContactForm#title#java.lang.String"/>
 * <pageflow-object id="formbeanprop:pageflow.sforceController.ContactForm#businessPhone#java.lang.String"/>
 * <pageflow-object id="formbeanprop:pageflow.sforceController.ContactForm#mobilePhone#java.lang.String"/>
 * <pageflow-object id="formbeanprop:pageflow.sforceController.ContactForm#email#java.lang.String"/>
 * <pageflow-object id="formbeanprop:pageflow.sforceController.ContactForm#mailingStreet#java.lang.String"/>
 * <pageflow-object id="formbeanprop:pageflow.sforceController.ContactForm#mailingCity#java.lang.String"/>
 * <pageflow-object id="formbeanprop:pageflow.sforceController.ContactForm#mailingState#java.lang.String"/>
 * <pageflow-object id="formbeanprop:pageflow.sforceController.ContactForm#mailingCountry#java.lang.String"/>
 * <pageflow-object id="formbean:pageflow.sforceController.ContactForm"/>
 * <pageflow-object id="formbeanprop:pageflow.sforceController.OpportunityForm#name#java.lang.String"/>
 * <pageflow-object id="formbeanprop:pageflow.sforceController.OpportunityForm#type#java.lang.String"/>
 * <pageflow-object id="formbeanprop:pageflow.sforceController.OpportunityForm#leadSource#java.lang.String"/>
 * <pageflow-object id="formbeanprop:pageflow.sforceController.OpportunityForm#amount#java.lang.String"/>
 * <pageflow-object id="formbeanprop:pageflow.sforceController.OpportunityForm#expectedAmount#java.lang.String"/>
 * <pageflow-object id="formbeanprop:pageflow.sforceController.OpportunityForm#closeDate#java.lang.String"/>
 * <pageflow-object id="formbeanprop:pageflow.sforceController.OpportunityForm#nextStep#java.lang.String"/>
 * <pageflow-object id="formbean:pageflow.sforceController.OpportunityForm"/>
 * <pageflow-object id="formbeanprop:pageflow.sforceController.EmailActionForm#to#java.lang.String"/>
 * <pageflow-object id="formbeanprop:pageflow.sforceController.EmailActionForm#subject#java.lang.String"/>
 * <pageflow-object id="formbeanprop:pageflow.sforceController.EmailActionForm#body#java.lang.String"/>
 * <pageflow-object id="formbeanprop:pageflow.sforceController.EmailActionForm#cc#java.lang.String"/>
 * <pageflow-object id="formbean:pageflow.sforceController.EmailActionForm"/>
 * <pageflow-object id="forward:path#error#error.jsp"/>
 * </view-properties>
 * ::
 * 
 */
public class sforceController extends com.bea.wlw.netui.pageflow.PageFlowController
{
    /**                
     * The wrappepr control
     * For sample purposes, we will set the batch size to a small number, it defaults to 200
     * @common:control
     * @jc:sforce-properties  http-url="https://www.salesforce.com/services/Soap/c/3.0" query-batch-size="20"

     */
    private org.controlhaus.sforce.sforce3_0Enterprise sForce;


    /**
     * @common:control
     */
    private pageflow.Email emailContactControl;


    LoginResult loginResult;

	public	String accountSelect = "Select Id, Name, Rating, Industry, billingCity, billingState, AccountNumber, Site, Type, Phone, TickerSymbol, Ownership, NumberOfEmployees, BillingStreet, BillingPostalCode, BillingCountry From Account";
	public	String contactSelect = "SELECT Id, AccountId, LastName, FirstName, Salutation, MailingStreet, MailingCity, MailingState, MailingPostalCode, MailingCountry, Phone, MobilePhone, Email, Title, Department, Description FROM Contact"; 
	public	String opportunitySelect = "SELECT Id, CloseDate, AccountId, Name, ExpectedRevenue, Amount, Type, NextStep, LeadSource FROM Opportunity";


    public LoginForm user;
    public String userId;

    public AccountForm[] accounts;
    public AccountForm selectedAccount;
	public EmailActionForm emailForm;
	
    //     Uncomment this declaration to access Global.app.
    //
    //     protected global.Global globalApp;
    //


    /**
     * This method represents the point of entry into the pageflow
     *
     * @jpf:action
     * @jpf:forward name="success" path="index.jsp"
     */
    protected Forward begin()
    {
        return new Forward( "success" );
    }

    /**
     * @jpf:action
     * @jpf:forward name="success" path="GetCustomers.do"
     * @jpf:forward name="error" path="error.jsp"
     */
    protected Forward Login(LoginForm form)
    {
        boolean result = false;

        try
        {
            //attemp to login using the user provided username and password
			loginResult = sForce.login( form.getUsername(), form.getPassword() );
        }
        catch (Exception ex)
        {
            ex.printStackTrace();
        }

        if ( null==loginResult.getSessionId() )
        {
            this.getRequest().setAttribute("msg", "Error occurred in login");
            return new Forward ("error");
        }


        Forward f = new Forward("success");
        f.addQueryParam("refresh", "refresh");
        return f;
    }

    /**
     * @jpf:action
     * @jpf:forward name="success" path="customerSummary.jsp"
     */
    //Retrieve a set of all accounts that this user can see.  This is an unbounded query.
    protected Forward GetCustomers()
    {
        int batchSize = 8;
        try
        {
            if (this.getRequest().getParameter("refresh") != null || accounts == null) {
                
                // Query Account
                QueryResult queryResult=sForce.query(accountSelect);

                //queryResult.getSize() returns the total number of records that matched the query
                //criteria.  This number can be larger than the length of the getRecordsArray() 
                //due to the ability to specify the number of records returned for a batch.  
                if ( queryResult.getSize() != 0 ) {
                    // store accounts
                    //create a loop control variable
                    boolean done = false;
                    int loopCount = 0;  //use this as an offset into the accounts
                    //use the getSize() method to set the size of the array
                    accounts = new AccountForm[queryResult.getSize()];
                    while (!done) {
                        for (int i=0; i< queryResult.getRecordsArray().length; i++) {
                            accounts[loopCount] = new AccountForm();
                            SObject sObj = queryResult.getRecordsArray(i);
                            accounts[loopCount].setAccount((Account) sObj);
                            loopCount++;
                        }
                        //check to see if this is the last batch from the query
                        if (queryResult.getDone()) {
                            //set the loop control to true to exit the loop
                            done = true;
                        } else {
                            // this means there is another batch of records to be retrieved
                            // reset the queryResult using the queryMore function passing the 
                            // "cursor" to the function.                            
                            queryResult = sForce.queryMore(queryResult.getQueryLocator());
                        }
                    }
                }
            }
        }
        catch( Exception ex)
        {
            this.getRequest().setAttribute("msg", ex.getMessage());
            ex.printStackTrace();
            return new Forward("error");
        }

        return new Forward("success");
    }

    /**
     * @jpf:action
     * @jpf:forward name="success" path="customerDetail.jsp"
     */
    protected Forward GetCustomerDetail()
    {
        try
        {
            String accountId = "";
            
            //check to see if an accountid was passed to the function from a jsp
            if (this.getRequest().getParameter("accountid") != null) {
                accountId = this.getRequest().getParameter("accountid");
            
                selectedAccount = null;
                //loop through our cached list of accounts to find the selected one
                for (int i=0; i < accounts.length; i++) {
                    if ( accounts[i].getId().equals(accountId) ) {
                        selectedAccount = accounts[i];
                        break;
                    }
                }
            }
            
            // we will only go back to the database if the user has selected refresh 
            // or this is the first time through.
            if (this.getRequest().getParameter("refresh") != null || selectedAccount.getContacts() == null) {
                // Query Contact
                //setSessionHeaders(loginResult);
                // run a query using the account id as a filter.
                QueryResult queryResult = sForce.query(contactSelect + " WHERE accountId='" + accountId + "'");
                
                if ( queryResult.getSize() != 0 ) {
                    // store contacts - we use the same queryResult processing pattern as used
                    // for the accounts
                    ContactForm[] contacts = new ContactForm[queryResult.getSize()];
                    boolean done = false;
                    int loopCount = 0;
                    while (!done) {
                        for (int i=0; i< queryResult.getRecordsArray().length; i++) {
                            contacts[loopCount] = new ContactForm();
                            SObject sObj = queryResult.getRecordsArray(i);
                            contacts[loopCount].setContact((Contact) sObj);
                            loopCount++;
                        }
                        if (queryResult.getDone()) {
                            done = true;
                        } else {
                            queryResult = sForce.queryMore(queryResult.getQueryLocator());
                        }
                    }
                    //save the set of contacts in the parent account
                    selectedAccount.setContacts(contacts);
                } else {
                    selectedAccount.setContacts(null);
                }
            }
            
        }
        catch(Exception ex)
        {
            this.getRequest().setAttribute("msg", ex.getMessage());
            ex.printStackTrace();
            return new Forward("error");
        }

        return new Forward("success");
    }

    /**
     * @jpf:action
     * @jpf:forward name="success" path="customerOpportunities.jsp"
     */
    protected Forward GetOpportunities()
    {
        
        String accountId = "";
        
        //check to see if an accountid was passed to the function from a jsp
        if (this.getRequest().getParameter("accountid") != null) {
            accountId = this.getRequest().getParameter("accountid");
        
            selectedAccount = null;
            //loop through our cached list of accounts to find the selected one
            for (int i=0; i < accounts.length; i++) {
                if ( accounts[i].getId().equals(accountId) ) {
                    selectedAccount = accounts[i];
                    break;
                }
            }
        }
        
        // we will only go back to the database if the user has selected refresh 
        // or this is the first time through.
        if (selectedAccount.getOpportunities() == null || getRequest().getParameter("refresh") != null) {
            try
            {
                accountId = selectedAccount.getId();
                // Query opportunity using the account id as a filter
                QueryResult queryResult=sForce.query(opportunitySelect + " WHERE accountId='" + accountId + "'");
                
                // again, using the same pattern as used for account
                if ( queryResult.getSize() != 0 ) {
                    // store Opportunity
                    OpportunityForm[] opportunities = new OpportunityForm[queryResult.getSize()];
                    boolean done = false;
                    int loopCount = 0;
                    
                    while (!done) {
                        for (int i=0; i< queryResult.getRecordsArray().length; i++) {
                            opportunities[loopCount] = new OpportunityForm();
                            SObject sObj = queryResult.getRecordsArray(i);
                            opportunities[loopCount].setOpportunity((Opportunity) sObj.changeType(Opportunity.type));
                            loopCount++;
                        }
                        
                        if (queryResult.getDone()) {
                            done = true;
                        } else {
                            queryResult = sForce.queryMore(queryResult.getQueryLocator());
                        }
                    }
                    selectedAccount.setOpportunities(opportunities);
                } else {
                    selectedAccount.setOpportunities(null);
                }
            }
            catch(Exception ex)
            {
                this.getRequest().setAttribute("msg", ex.getMessage());
                ex.printStackTrace();
                return new Forward("error");
            }
        }
        return new Forward("success");
    }

    /**
     * @jpf:action
     * @jpf:forward name="success" path="index.jsp"
     */
    protected Forward Logout()
    {
        return new Forward("success");
    }


    /**
     * @jpf:action
     * @jpf:forward name="success" path="GetCustomerDetail.do"
     */
    protected Forward emailCancelAction(EmailActionForm form)
    {
        return new Forward("success");
    }

    /**
     * @jpf:action
     * @jpf:forward name="success" path="GetCustomerDetail.do"
     */
    protected Forward emailAction(EmailActionForm form)
    {
		try {
		emailContactControl.sendEmail(form.getTo(),form.getCc(),null,form.getSubject(),	form.getBody(),null);
		}
		catch(Exception e) {
			System.out.println("exception="+e.getMessage());	
		}
        return new Forward("success");
    }

    /**
     * @jpf:action
     * @jpf:forward name="success" path="emailPage.jsp"
     * @jpf:catch type="Exception" path="error.jsp"
     */
    protected Forward prepareEmail()
    {
		emailForm = new EmailActionForm();
		emailForm.setTo(getRequest().getParameter("email"));
        return new Forward("success", emailForm);
    }

    /**
     * @jpf:action
     * @jpf:forward name="success" path="newContact.jsp"
     */
    protected Forward newContact()
    {
        return new Forward("success", new ContactForm());
    }

    /**
     * @jpf:action
     * @jpf:forward name="success" path="GetCustomerDetail.do"
     * @jpf:forward name="error" path="error.jsp"
     */
    protected Forward createContact(ContactForm form)
    {
        //Create a new contact for the currently active account.
		form.setAccountId(this.getRequest().getParameter("accountid"));

        CreateDocument cd = CreateDocument.Factory.newInstance();
        Create c = cd.addNewCreate();
        Contact contact = Contact.Factory.newInstance();
        contact.setAccountId(this.getRequest().getParameter("accountid"));
        contact.setPhone(form.getBusinessPhone());
        contact.setDepartment(form.getDepartment());
        contact.setEmail(form.getEmail());
        contact.setFirstName(form.getFirstName());
        contact.setLastName(form.getLastName());
        contact.setMailingCity(form.getMailingCity());
        contact.setMailingCountry(form.getMailingCountry());
        contact.setMailingState(form.getMailingState());
        contact.setMailingStreet(form.getMailingStreet());
        contact.setMobilePhone(form.getMobilePhone());
        contact.setSalutation(form.getSalutation());
        contact.setTitle(form.getTitle());
        
        c.setSObjectsArray(new SObject[] {contact});
        SaveResult[] sr = this.sForce.createDoc(cd).getCreateResponse().getResultArray();
        
        if (sr[0].getSuccess()) {
            Forward f = new Forward("success");
            f.addQueryParam("refresh", "refresh");
            return f;
        }
        else
            return new Forward("error");
    }


    public static class LoginForm extends com.bea.wlw.netui.pageflow.FormData
    {
        private java.lang.String password = "";

        private java.lang.String username = "";


        public void setUsername(java.lang.String username)
        {
            this.username = username;
        }

        public java.lang.String getUsername()
        {
            return this.username;
        }

        public void setPassword(java.lang.String password)
        {
            this.password = password;
        }

        public java.lang.String getPassword()
        {
            return this.password;
        }
    }

    public static class AccountForm extends com.bea.wlw.netui.pageflow.FormData
    {
        private Account account = Account.Factory.newInstance();
        private ContactForm[] contacts;
        private OpportunityForm[] opportunities;
        
        public ContactForm[] getContacts(){
            if (contacts == null) {
            } 
            return contacts;
        }
        
        public void setContacts(ContactForm[] _contacts) {
            contacts = _contacts;
        }
        
        public OpportunityForm[] getOpportunities() {
            return opportunities;
        }
        
        public void setOpportunities(OpportunityForm[] _opportunities) {
            opportunities = _opportunities;
        }
        
        public void setAccount( Account account)
        {
            this.account=account;
		}

        public java.lang.String getId()
        {
            return account.getId();
        }

        public java.lang.String getName()
        {
            return account.getName();
        }
        public java.lang.String getRating()
        {
            return account.getRating();
        }
        public java.lang.String getIndustry()
        {
            return account.getIndustry();
        }
        public java.lang.String getBillingCity()
        {
            return account.getBillingCity();
        }
        public java.lang.String getBillingState()
        {
            return account.getBillingState();
        }
        public java.lang.String getAccountNumber()
        {
            return account.getAccountNumber();
        }
        public java.lang.String getSite()
        {
            return account.getSite();
        }
        public java.lang.String getType()
        {
            return account.getType();
        }
        public java.lang.String getAccountPhone()
        {
            return account.getPhone();
        }
        public java.lang.String getUrl()
        {
            return account.getWebsite();
        }
        public java.lang.String getTicker()
        {
            return account.getTickerSymbol();
        }
        public java.lang.String getOwnership()
        {
            return account.getOwnership();
        }
        public java.lang.String getEmployees()
        {
            return Integer.toString(account.getNumberOfEmployees());
        }
        public java.lang.String getBillingStreet()
        {
            return account.getBillingStreet();
        }
        public java.lang.String getBillingPostalCode()
        {
            return account.getBillingPostalCode();
        }
        public java.lang.String getBillingCountry()
        {
            return account.getBillingCountry();
        }
    }

    public static class ContactForm extends com.bea.wlw.netui.pageflow.FormData
    {
        private Contact contact = Contact.Factory.newInstance();

		public Contact getContact() {
			return this.contact;
		}
		
        public void setContact( Contact contact) 
        {
            this.contact = contact;
        }
		public void setAccountId(String accountId) {
			this.contact.setAccountId(accountId);	
		}
        public java.lang.String getSalutation()
        {
            if (contact.getSalutation() == null)
                return "";
            else
                return contact.getSalutation();
        }
        public java.lang.String getFirstName()
        {
            if (contact.getFirstName() == null) 
                return "";
            else
                return contact.getFirstName();
        }
        public java.lang.String getLastName()
        {
            return contact.getLastName();
        }
        public java.lang.String getDepartment()
        {
            if (contact.getDepartment() == null)
                return "";
            else
                return contact.getDepartment();
        }
        public java.lang.String getTitle()
        {
            if (contact.getTitle() == null)
                return "";
            else
                return contact.getTitle();
        }
        public java.lang.String getBusinessPhone()
        {
            if (contact.getPhone() == null)
                return "";
            else
                return contact.getPhone();
        }
        public java.lang.String getMobilePhone()
        {
            if (contact.getMobilePhone() == null)
                return "";
            else
                return contact.getMobilePhone();
        }
        public java.lang.String getEmail()
        {
            if (contact.getEmail() == null)
                return "";
            else
                return contact.getEmail();
        }
        public java.lang.String getMailingStreet()
        {
            if (contact.getMailingStreet() == null)
                return "";
            else
                return contact.getMailingStreet();
        }
        public java.lang.String getMailingCity()
        {
            if (contact.getMailingCity() == null)
                return "";
            else
                return contact.getMailingCity();
        }
        public java.lang.String getMailingState()
        {
            if (contact.getMailingState() == null)
                return "";
            else
                return contact.getMailingState();
        }
        public java.lang.String getMailingCountry()
        {
            if (contact.getMailingCountry() == null)
                return "";
            else
                return contact.getMailingCountry();
        }
        public void setSalutation(String s)
        {
			this.contact.setSalutation(s);
        }
        public void setFirstName(String s)
        {
            this.contact.setFirstName(s);
        }
        public void setLastName(String s)
        {
            this.contact.setLastName(s);
        }
        public void setDepartment(String s)
        {
            this.contact.setDepartment(s);
        }
        public void setTitle(String s)
        {
            this.contact.setTitle(s);
        }
        public void setBusinessPhone(String s)
        {
            this.contact.setPhone(s);
        }
        public void setMobilePhone(String s)
        {
            this.contact.setMobilePhone(s);
        }
        public void setEmail(String s)
        {
            this.contact.setEmail(s);
        }
        public void setMailingStreet(String s)
        {
            this.contact.setMailingStreet(s);
        }
        public void setMailingCity(String s)
        {
            this.contact.setMailingCity(s);
        }
        public void setMailingState(String s)
        {
            this.contact.setMailingState(s);
        }
        public void setMailingCountry(String s)
        {
            this.contact.setMailingCountry(s);
        }

    }

    public static class OpportunityForm extends com.bea.wlw.netui.pageflow.FormData
    {
        private Opportunity opportunity = Opportunity.Factory.newInstance();

        public void setOpportunity( Opportunity opportunity) 
        {
            this.opportunity = opportunity;
        }

        public java.lang.String getName()
        {
            return opportunity.getName();
        }

        public java.lang.String getType()
        {
            return opportunity.getType();
        }
        public java.lang.String getLeadSource()
        {
            return opportunity.getLeadSource();
        }
        public java.lang.String getAmount()
        {
            if (opportunity.getAmount() == 0) 
                return "$0.00";
            else {
                String out = NumberFormat.getCurrencyInstance().format(opportunity.getAmount());
                return out;
            }
        }
        public java.lang.String getExpectedAmount()
        {
            if (opportunity.getExpectedRevenue() == 0)
                return "$0.00";
            else {
                String out = NumberFormat.getCurrencyInstance().format(opportunity.getExpectedRevenue());
                return out;
            }
        }
        public java.lang.String getCloseDate()
        {
			try {

			//SimpleDateFormat formatter = new SimpleDateFormat("yyyy-MM-dd'T'hh:mm:ss+SSSS");
			//String date=formatter.format(opportunity.getCloseDate());
            return opportunity.getCloseDate().toString();
	//		return date;
				//return new com.bea.xml.GDate("2003-10-14T00:00:00.000Z").getDate().toString();
			}
			catch(Exception e) {
				System.out.println("exception="+e.getMessage());	
				return null;
			}
        }
        public java.lang.String getNextStep()
        {
            return opportunity.getNextStep();
        }
    }


    /**
     * FormData get and set methods may be overwritten by the Form Bean editor.
     */
    public static class EmailActionForm extends FormData
    {
        private String cc;

        private String body;

        private String subject;

        private String to;

        public void setTo(String to)
        {
            this.to = to;
        }

        public String getTo()
        {
            return this.to;
        }

        public void setSubject(String subject)
        {
            this.subject = subject;
        }

        public String getSubject()
        {
            return this.subject;
        }

        public void setBody(String body)
        {
            this.body = body;
        }

        public String getBody()
        {
            return this.body;
        }

        public void setCc(String cc)
        {
            this.cc = cc;
        }

        public String getCc()
        {
            return this.cc;
        }
    }

}
