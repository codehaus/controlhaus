/*   Copyright 2004 Salesforce.com
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 */

package websvcs;

import com.bea.xml.XmlObject;
import com.sforce.soap.enterprise.*;
import com.sforce.soap.enterprise.sobject.*;
import java.util.Calendar;

/**
 */
public class TestAll implements com.bea.jws.WebService
{


     /**
     * @common:control
     * @jc:sforce-properties validate-level="Verbose" http-url="https://www.salesforce.com/services/Soap/c/3.0" query-batch-size="30"

     */
    private org.controlhaus.sforce.sforce3_0Enterprise sForceValidate;  

    /**
     * 
     * @common:control
     * @jc:sforce-properties validate-level="Verbose" http-url="https://www.salesforce.com/services/Soap/c/3.0" query-batch-size="30"

     */
    private org.controlhaus.sforce.sforce3_0Enterprise sForceNoValidate;  

    
    static final long serialVersionUID = 1L;
    
    /**
     * Enter your sforce.com developer username and password to run this test.  
     * If you don't have an sforce.com account just register for one on http://www.sforce.com
     * @common:operation
     * 
     */
    public void fullTest(String username, String password)
    {
        runTest(sForceNoValidate, username, password);
    }
    

    /**
     * @common:operation
     */
    public void fullTestWithValidate(String username, String password)
    {
        runTest(sForceValidate,username,password);
        
    }

    private void runTest(org.controlhaus.sforce.sforce3_0Enterprise sForce, String username, String password)
    {   
        
        if (username.length()==0)
        {
            username="matyix@yahoo.com";
            password="sforce";
        }
        
        //user logs in 
        LoginResult lr = sForce.login(username, password); 

        //now get some information about the logged in user        
        com.sforce.soap.enterprise.GetUserInfoResult userInfo = sForce.getUserInfo();
        String userid = userInfo.getUserId(); 
        
        //get the server's timestamp
        Calendar startTime = sForce.getServerTimestamp();
        
        //describe all available objects for the logged in user
        DescribeGlobalResult dr = sForce.describeGlobal();
        
        //create a new contact and add this contact to user's contact list
        //we exersize the createDoc method on sForce control
        ContactDocument cd1 = ContactDocument.Factory.newInstance();
        cd1.addNewContact();
        cd1.getContact().setLastName("Doe");
        cd1.getContact().setFirstName("John");
 
        ContactDocument cd2 = ContactDocument.Factory.newInstance();
        cd2.addNewContact();
        cd2.getContact().setLastName("Doe");
        cd2.getContact().setFirstName("Jane");
 
        CreateDocument createdoc = CreateDocument.Factory.newInstance();
        createdoc.addNewCreate();
        createdoc.getCreate().setSObjectsArray(new SObject []{cd1.getContact(), cd2.getContact()});
        CreateResponseDocument crd = sForce.createDoc(createdoc);
        
        //analize the result from the create account stuff
        SaveResult[] srs = crd.getCreateResponse().getResultArray();
        for (int i=0;i<srs.length;i++) {
            SaveResult sr = srs[i];
            if (sr.getSuccess()) {
                System.out.println("New id: " + sr.getId());
            } else {
                com.sforce.soap.enterprise.Error[] errors = sr.getErrorsArray();
                for (int j=0;j<errors.length;i++) {
                    com.sforce.soap.enterprise.Error error = errors[j];
                    String msg = error.getMessage();
                    String[] fields = error.getFieldsArray();
                    String flds = "";
                    for (int k=0;k<fields.length;k++){
                        if (fields[k] != null) 
                            flds += fields[k] + ", ";
                    }
                }
            }
        }
        
        //add an account excersizing the createOne method on sForce control
        //then delete it excersizing the deleteOne method on control
        Account acct = Account.Factory.newInstance();
        acct.setName("new account test");
        acct.setType("Customer");
        acct.setIndustry("Technology");
        acct.setBillingCity("Boise");
        acct.setBillingState("Idaho");
        
        SaveResult saveResult = sForce.createOne(acct);
        String sId = saveResult.getId();
        
        acct.setId(sId);
        acct.setType("Partner");
        //update account information
        sForce.updateOne(acct);
        //excersizing the deleteOne method on control
        sForce.deleteOne(sId).getSuccess();
        
        //describe the Account object properties
        DescribeSObjectResult dsor = sForce.describeSObject("Account");
        
        //query from Contacts
        QueryResult qr = sForce.query("select Id, ownerID, FirstName, LastName from Contact where LastName = 'Doe' or LastName='Frost'");
        SObject[] records = qr.getRecordsArray();
        //excersizing the delete method on control - we are deleting contacts
        String[] sIdsToDelete = new String[records.length];
        
        for (int i=0;i<records.length;i++) {
            
            Contact contact = (Contact) records[i];
            sIdsToDelete[i] = contact.getId();

            contact.setFirstName("David");
            UpdateDocument ud = UpdateDocument.Factory.newInstance();
            ud.addNewUpdate().setSObjectsArray(new SObject[] {contact});
            
            //retrive the objects    
            RetrieveDocument rd = RetrieveDocument.Factory.newInstance();
            rd.addNewRetrieve();
            rd.getRetrieve().setFieldList("FirstName, LastName");
            rd.getRetrieve().setIdsArray(new String[] {contact.getId()});
            rd.getRetrieve().setSObjectType("Contact");
            sForce.retrieveDoc(rd); 
            //now again, this case with retrieve method
            sForce.retrieve("FirstName, LastName", "Contact", contact.getId());
            
        }
        // now delete the added records
        sForce.delete(sIdsToDelete);
        
        // new for 3.0, check the replication calls
        Calendar endTime = sForce.getServerTimestamp();        
        sForce.getDeleted("Contact", startTime, endTime);
        sForce.getUpdated("Contact", startTime, endTime);        
        
        // also new for 3.0, search function
        //This search will look for a particular phone number in Contacts,  
        //Leads and Accounts returning similar information for Contact 
        //and Leads and just the name and phone number for the Accounts 
        String searchString = "find {4159017000} in phone fields " +  
            "returning contact(id, phone, firstname, lastname), " +                     
            "lead(id, phone, firstname, lastname), " +  
            "account(id, phone, name)"; 
 
        SearchResult sr = sForce.search(searchString);
        
        //set password    
        sForce.setPassword(userid, "hulahula");
        sForce.setPassword(userid, password );
            
        //setSaveOptions test - with case creation
        
        //Create a new case and assign various properties 
        Case _case = Case.Factory.newInstance();
        //Create a new contact for Case
        Contact caseContact = Contact.Factory.newInstance();
        caseContact.setLastName("Miller");
        caseContact.setFirstName("Jane");
        SaveResult saveCaseResult = sForce.createOne(caseContact);
        String sCaseId = saveCaseResult.getId();
         
        _case.setContactId(sCaseId);
        _case.setDescription("This is a test case."); 
        _case.setPriority("High"); 
        //The case assignment rule will assign any new cases that 
        //have "Same old reason" as the reason to a particular user 
        _case.setReason("Same old reason"); 
        _case.setStatus(""); 
        _case.setSubject("This is a test case"); 
        _case.setSuppliedCompany("ABC Corporation"); 
        _case.setSuppliedEmail("joe@blow.com"); 
        _case.setSuppliedName("Joe Blow"); 
        _case.setSuppliedPhone("(415) 555-5555"); 
        _case.setType(""); 
        
        //set a case assignement id, and assign it to this rule
        sForce.setSaveOptions("01Q3000000009Bh", true);
        sForce.createOne(_case);
        //reset save options back to default and add a new case - assigned to the default case owner
        sForce.resetSaveOptionsToDefault();
        sForce.createOne(_case);
        
         //use queryMore method in wrapper
        QueryResult queryResult = null; 
        // Set up query options. Set the max batch size to 3 
        // so that we can exercise the queryMore call as well 
        sForce.setQueryOptions(4);
 
        // Invoke the query call and save the results 
        queryResult = sForce.query("select FirstName, LastName from Contact"); 
        // Determine whether the query returned all the possible records 
        if (queryResult.getDone()) { 
        // Iterate through the records and process them 
            for (int i = 0; i < queryResult.getRecordsArray().length; i++) { 
                Contact con = (Contact) queryResult.getRecordsArray (i); 
                String firstName = con.getFirstName(); 
                String lastName = con.getLastName(); 
            } 
        } 
        else { 
            // Need to use queryMore call after processing 
            // the first set of records from the query result 
            while (queryResult.getRecordsArray() != null) { 
                for (int i = 0; i < queryResult.getRecordsArray().length; i++) { 
                   Contact con = (Contact) queryResult.getRecordsArray(i); 
                   String firstName = con.getFirstName(); 
                   String lastName = con.getLastName(); 
                   System.out.println("Contact " + (i + 1) + ": " + firstName + " " + lastName); 
                } 
                // Invoke the queryMore call to get the next set of returned rows 
                if (null == queryResult.getQueryLocator())  {
                    break;                  
                }
                else {
                    queryResult = sForce.queryMore(queryResult.getQueryLocator()); 
                }
            } 
        }
        //reseting the query batch size to default or annotation value
        sForce.resetQueryOptionsToDefault();
        
        System.out.println("WEBSERVICE Test Drive for testAll methods against sForce control finished");
    }

    /**
     * @common:operation
     */
    public void testTest()
    {
        LoginResult lr = sForceValidate.login("matyix@yahoo.com", "sforce"); 
        com.sforce.soap.enterprise.GetUserInfoResult userInfo = sForceValidate.getUserInfo();
        String userid = userInfo.getUserId();
    }

}
