################################################################################
# P O R T A L   S K I N   C O N F I G U R A T I O N
#
# Use this file to configure link and script dependencies for your Portal skin.
# This file consists of sections for configuring skins for proper inclusion in
# rendered HTML.  See any given section for more information.
#
# Critical data for this skin:
#
# Skin Name:       Text (text-only)
# Skin License:    WebLogic Portal Licensees
################################################################################

#-------------------------------------------------------------------------------
# L I N K   E N T R I E S
#
# Use this section to configure link entries, such as CSS references.  Property
# entries for this section essentially encapsulate an HTML "link" tag.  This is
# accomplished as follows:
#
# 1) All entries for this section begin with the property prefix "link" to
#    scope them as describing link tags
# 2) A short name is used to group properties related to a single tag name
# 3) Together, (1) and (2) define a link tag to be generated
# 4) Finally, the base property prefix formed by the union of (1) and (2) is
#    used to define attributes to be set for the given link tag by appending
#    a value for any valid HTML link tag attribute
# 5) The union of (1) - (4) yields a complete property name usable in this
#    section; as long as at least one attribute is specified with a value in
#    a given link group
#
# From the HTML 4.01 point of view, valid link tag attribute names are as
# follows:
#
#   charset     -- char encoding of linked resource --
#   href        -- URI for linked resource --
#   hreflang    -- language code --
#   type        -- advisory content type --
#   rel         -- forward link types --
#   rev         -- reverse link types --
#   media       -- for rendering on these media --
#
# One additional "special" attribute is included.  This attribute is not
# rendered in the HTML output, but is instead used to determine the order of
# the output with respect to script tags representing other property groups.
# The attribute name is "index", and its value may be any integer value.
# Rendering of indexed property groups will occur in ascending order, with
# any remaining, unindexed groups being rendered last in an arbitrary order
# relative to one another.  This attribute is optional.
#
# Complete Example:
#
#   These properties...
#
#       link.document.href:   css/document.css
#       link.document.rel:    stylesheet
#       link.document.media:  screen
#       link.document.index:  2
#
#       link.input.href:      css/input.css
#       link.input.rel:       stylesheet
#       link.input.media:     screen
#       link.input.index:     1
#
#   ...will generate this HTML:
#
#       <link href="{qualified skin path}/css/input.css"
#           rel="stylesheet" media="screen"/>
#       <link href="{qualified skin path}/css/document.css"
#           rel="stylesheet" media="screen"/>
#
# Link hrefs should be defined relative to this file.
# 
# There is one additional property, "link.search.path", which allows you to define 
# the search path used for finding link files.  This is a comma-delimited list
# of directories, which will be searched in the order given.  Those directories 
# should be defined relative to this file.  This property is optional, and its
# default value is "., .., ../.., ../../.. [and so on]".
#-------------------------------------------------------------------------------

link.body.href:     body.css
link.body.rel:      stylesheet
link.body.type:     text/css

link.book.href:     book.css
link.book.rel:      stylesheet
link.book.type:     text/css

link.button.href:   button.css
link.button.rel:    stylesheet
link.button.type:   text/css

link.form.href:     form.css
link.form.rel:      stylesheet
link.form.type:     text/css

link.layout.href:   layout.css
link.layout.rel:    stylesheet
link.layout.type:   text/css

link.portlet.href:  portlet.css
link.portlet.rel:   stylesheet
link.portlet.type:  text/css

link.window.href:   window.css
link.window.rel:    stylesheet
link.window.type:   text/css

#-------------------------------------------------------------------------------
# S C R I P T   E N T R I E S
#
# Use this section to configure script entries, such as JavaScript references.
# Property entries for this section essentially encapsulate an HTML "script"
# tag.  This is accomplished as follows:
#
# 1) All entries for this section begin with the property prefix "script" to
#    scope them as describing script tags
# 2) A short name is used to group properties related to a single tag name
# 3) Together, (1) and (2) define a script tag to be generated
# 4) Finally, the base property prefix formed by the union of (1) and (2) is
#    used to define attributes to be set for the given script tag by appending
#    a value for any valid HTML script tag attribute
# 5) The union of (1) - (4) yields a complete property name usable in this
#    section; as long as at least one attribute is specified with a value in
#    a given script group
#
# From the HTML 4.01 point of view, valid script tag attribute names are as
# follows:
#
#   charset     -- char encoding of linked resource --
#   type        -- content type of script language --
#   src         -- URI for an external script --
#   defer       -- UA may defer execution of script --
#
# One additional "special" attribute is included.  This attribute is not
# rendered in the HTML output, but is instead used to determine the order of
# the output with respect to script tags representing other property groups.
# The attribute name is "index", and its value may be any integer value.
# Rendering of indexed property groups will occur in ascending order, with
# any remaining, unindexed groups being rendered last in an arbitrary order
# relative to one another.  This attribute is optional.
#
# Complete Example:
#
#   These properties...
#
#       script.skin.src:   js/skin.js
#       script.skin.type:  text/javascript
#       script.skin.index: 2
#
#       script.util.src:  js/util.js
#       script.util.type: text/javascript
#       script.util.index: 1
#
#   ...will generate this HTML:
#
#       <script src="{qualified skin path}/js/util.js" type="text/javascript"></script>
#       <script src="{qualified skin path}/js/skin.js" type="text/javascript"></script>
#
# Script hrefs should be defined relative to this file.
#
# There is one additional property, "script.search.path", which allows you to define 
# the search path used for finding script files.  This is a comma-delimited list
# of directories, which will be searched in the order given.  Those directories 
# should be defined relative to this file.  This property is optional, and its
# default value is "., .., ../.., ../../.. [and so on]".
#-------------------------------------------------------------------------------

script.skin.src:    skin.js
script.skin.type:   text/javascript

script.menu.src:    menu.js
script.menu.type:   text/javascript

script.util.src:    util.js
script.util.type:   text/javascript

script.delete.src:  delete.js
script.delete.type: text/javascript

script.search.path: js

#-------------------------------------------------------------------------------
# B O D Y   E V E N T   S C R I P T   H O O K S
#
# Because some skins will want to decouple as much script source associated with
# a skin from the rendered content of a given document as possible, the
# following property defines a way for the skin to add a hook to the "body"
# tag's "onload" event handler.  Doing so will cause the value of this property
# to be inserted into the beginning of the event handler's command list before
# rendering.  The end result will be the evaluation of said property value after
# the document has been completely loaded, allowing the skin's scripts to apply
# themselves to the document, just in time.  Typically, the value of this
# property is a script function call defined in one of the script declarations
# from the previous section.
#
# Additionally, an "onunload" property is available, that works in exactly the
# same way as the "onload" property, as demonstrated below.
#
# These properties are optional.
#
# Complete Example:
#
#   This property...
#
#       document.body.onload: addSkinEventHandlers()
#
#   ...will generate this HTML:
#
#       <body onload="addSkinEventHandlers();">
#-------------------------------------------------------------------------------

document.body.onload:   initSkin()

#-------------------------------------------------------------------------------
# S K E L E T O N   D E P E N D E N C Y
#
# If this skin was written to be used specifically with a particular skeleton
# implementation, this property may be set to specify that skeleton.  In the
# absence of a "skeleton" attribute of the "netuix:lookAndFeel" control
# the value of this property will be used instead of the catch-all default
# skeleton ("default").  The default skeleton path may be set in the same way.
#
# The path property should be defined relative to the webapp root.
#
# These properties are optional.
#-------------------------------------------------------------------------------

default.skeleton.id:    text
default.skeleton.path:  /framework/skeletons

#-------------------------------------------------------------------------------
# P R E D E F I N E D   M E T A D A T A
#
# Some metadata is predefined that can be convenient for testing or debugging.
# For example, adding information about the look and feel in use can aid in test
# development in that the tests can identify the document style being handled
# and can adjust it's testing methodologies or reporting as appropriate.
#
# This data manifests as a series of <meta/> tags located in the document head.
# Please see the actual output for examples.
#
# Absence of this property or any value ofther than "true" will yield a false
# setting, which will mute the output of such meta info.
#
# This property is optional.
#-------------------------------------------------------------------------------

enable.meta.info:   true
