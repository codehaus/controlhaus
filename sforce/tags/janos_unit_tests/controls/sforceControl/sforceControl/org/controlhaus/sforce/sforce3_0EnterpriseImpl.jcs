/*   Copyright 2004 Salesforce.com
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 */

package org.controlhaus.sforce; 

import com.bea.control.*;
import com.bea.xml.XmlError;
import com.bea.xml.XmlObject;
import com.bea.xml.XmlOptions;
import com.sforce.soap.enterprise.*;
import com.sforce.soap.enterprise.SaveOptionsDocument.SaveOptions;
import com.sforce.soap.enterprise.sobject.SObject;
import java.lang.reflect.Method;
import java.net.MalformedURLException;
import java.net.URL;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Vector;
import org.w3c.dom.Document;
import org.w3c.dom.Element;

/**
 * @editor-info:code-gen control-interface="true"
 * @jcs:control-tags file::
 * sforce3_0-tags.xml
 * ::
 * @jcs:jc-jar version="1.0" 
 * insert-wizard-class="org.controlhaus.sforce.workshop.ide.sforceCheckWizard" 
 
 * icon-32="/images/sforce_32.gif" 
 * icon-16="/images/sforce_16.gif" 
 
 
 * description="Workshop Control to sforce.com services" 
 * label="sforce  3.0"
 * 
 */
public class sforce3_0EnterpriseImpl implements sforce3_0Enterprise, ControlSource
{ 

    /** 
     * SalesForce web service control instance
     * @common:control
     */
    private sforce3_0EnterpriseWS stdCtrl;
    
   /**
     * Container services and events that controls can use at run time
     * @common:context
    */
    com.bea.control.ControlContext context;
  
    
    static final long serialVersionUID = 1L;
    // header variables
    private org.w3c.dom.Element m_qoElem = null;
    private org.w3c.dom.Element m_shElem = null;
    private org.w3c.dom.Element m_soElem = null;
    private Element[] m_HdrElemArray;
    private URL m_url;
    private Integer m_IBatch;
    private int m_validateLevel=0;
    private String m_assignRuleId;
    private boolean m_autoAssign = true;
    private boolean nextAssignementIdWasCalled = false;
    private boolean nextBatchSizeWasCalled = false;
   
   /**
    * Control create event. Custom annotations processed, private members initialized.
    * @return void
    */
    public void context_onCreate() {
        // determine if we need to change the endpoint
        try {
            
            String sUrl = context.getControlAttribute("jc:sforce-properties", "http-url");
            if (sUrl != (stdCtrl.getEndPoint().toExternalForm()))
                m_url= new URL (sUrl);
            stdCtrl.setEndPoint(m_url);

            String sValidateLevel = context.getControlAttribute("jc:sforce-properties", "validate-level");
            if (sValidateLevel.length() > 0)
            {
                if (sValidateLevel.equals("Summary"))
                    m_validateLevel  = 1;
                if (sValidateLevel.equals("Verbose"))
                    m_validateLevel  = 2;
            }
            // annotation at the control level becomes default batch size
            String sBatch = context.getControlAttribute("jc:sforce-properties", "query-batch-size");
            if (null != sBatch)
            {
                 this.m_IBatch = new Integer(sBatch);
                 setQueryOptions(m_IBatch.intValue());
            }
            
             //annotation at control level for save options
            String assignRuleId = context.getControlAttribute("jc:sforce-properties", "save-assign-rule-id");
            String autoAssign = context.getControlAttribute("jc:sforce-properties", "save-auto-assign");
            
            if ("true".equals(autoAssign))  {
                this.m_autoAssign = true;
            }
            else if ("false".equals(autoAssign)){
                this.m_autoAssign = false;
            }
            
            this.m_assignRuleId = assignRuleId;
            
            setSaveOptions(m_assignRuleId, m_autoAssign);

                    
        } catch (Exception e) {
            e.printStackTrace();
        }

        return;
    }

    /**
     * Method onReset is implemented to let the container know that this 
     * instance can be re-used after a call to onReset().
     * called in non-conversational web service case only.
     * Since WLI Java Process FLows can look like stateless web services
     * we need this.
     * @return void  
     */
    public void context_onReset() {
        return;
    }
    

    /**
     * Login into Sales Force Enterprise system
     * @param userName Name of the user
     * @param password User's password
     * @common:operation
     */
    public LoginResult login(String username, String password)
    {
        LoginResult responseDoc = stdCtrl.login(username,password);
        attachToSession(responseDoc);
        
        return responseDoc;
       
    }

    /**
     * Query between SalesForce objects with a given query string
     * @param queryString
     * @return QueryResult The result of the query
     * @common:operation
     */
     
    public QueryResult query(String queryString)
    {
        stdCtrl.setOutputHeaders(refreshHeaders());
        QueryResult responseDoc = stdCtrl.query(queryString);            
        if (m_validateLevel>0) 
            validateXml(null,responseDoc, "query");
        
        return responseDoc;
    }

    /**
     * Query between SalesForce objects with a given query locator. 
     * @param queryLocator
     * @return  QueryResult The result of the query
     * @common:operation
     */
    
     
    public QueryResult queryMore(String queryLocator)
    {
        stdCtrl.setOutputHeaders(refreshHeaders());
        QueryResult responseDoc = stdCtrl.queryMore(queryLocator);
        if (m_validateLevel>0) 
            validateXml(null,responseDoc, "queryMore");
        //if responseDoc.    
        return responseDoc;
    }
    
    /**
     * Search among Sales Force objects
     * @param searchString
     * @return SearchResult The result of the search
     * @common:operation
     */

    public SearchResult search(java.lang.String searchString)
    {
        stdCtrl.setOutputHeaders(refreshHeaders());
        SearchResult responseDoc = stdCtrl.search(searchString);
        if (m_validateLevel>0) 
            validateXml(null,responseDoc, "search");
        return responseDoc;        
    }

    /**
     * Use the retrieve call to retrieve individual objects from an sforce API object. 
     * User passes the field to retrieve, the object, and the ID to retrieve.
     * @param fieldList Field to retrieve 
     * @param sObjectType The Sales Force object
     * @param id The ID to retireve
     * @return SObject A standard base Sales Force object
     * @common:operation
     */
    
    public SObject retrieve(String fieldList, String sObjectType, String id)
    {
        RetrieveDocument requestDoc = RetrieveDocument.Factory.newInstance();
        RetrieveDocument.Retrieve ret = requestDoc.addNewRetrieve();
        ret.setFieldList(fieldList);
        ret.setSObjectType(sObjectType);
        ret.setIdsArray(new String[]{id});
            
        RetrieveResponseDocument responseDoc = this.retrieveDoc(requestDoc);
        return responseDoc.getRetrieveResponse().getResultArray()[0];
    }
    
    /**
     * Retrieves a SOAP message document
     * @param requestDoc A SOAP request document
     * @return RetrieveResponseDocument The retrieved SOAP message document
     * @common:operation
     */
    public RetrieveResponseDocument retrieveDoc(RetrieveDocument requestDoc)
    {
        stdCtrl.setOutputHeaders(refreshHeaders());
        RetrieveResponseDocument responseDoc = stdCtrl.retrieve(requestDoc);
        if (m_validateLevel>0) 
            validateXml(requestDoc,responseDoc, "retrieve");
        return responseDoc;
    }

    /**
     * Create a Sales Force object array
     * @param sObjects A base Sales Force object
     * @return SaveResult[] Result array of the save operation
     * @common:operation
     */
    public  SaveResult [] create(SObject[] sObjects)
    {         
        CreateDocument requestDoc = CreateDocument.Factory.newInstance();
        requestDoc.addNewCreate().setSObjectsArray(sObjects);
        CreateResponseDocument responseDoc= this.createDoc(requestDoc);              
        return responseDoc.getCreateResponse().getResultArray();
    }


	/**
	 * Retrieves a SOAP message document
	 * @param requestDoc A SOAP request document
	 * @return CreateResponseDocument The retrieved SOAP message document
     * @common:operation
	 */
    public CreateResponseDocument createDoc(CreateDocument requestDoc)
    {   
        stdCtrl.setOutputHeaders(refreshHeaders());
        CreateResponseDocument responseDoc= stdCtrl.create(requestDoc);
        if (m_validateLevel>0) 
            validateXml(requestDoc,responseDoc, "create");
       
        //if (nextAssignementIdWasCalled) {    
            
            //nextAssignementIdWasCalled = false;
       // }
        return responseDoc;
    }

   /**
	* Create a Sales Force object - It is a simplified method, user can avoid tedious array coding usin this method 
	* @param sObjects A base Sales Force object
	* @return SaveResult Result of the save operation
    * @common:operation
	*/
    public SaveResult createOne(SObject sObject)
    {         
        CreateDocument requestDoc = CreateDocument.Factory.newInstance();
        SObject[] sObjects = new SObject[] {sObject}; 
        requestDoc.addNewCreate().setSObjectsArray(sObjects);
        CreateResponseDocument responseDoc= this.createDoc(requestDoc);              
        SaveResult[] saveResults = responseDoc.getCreateResponse().getResultArray();
        return saveResults[0];
    }


	/**
	 * Updates a Sales Force object array
	 * @param sObjects A base Sales Force object
	 * @return SaveResult[] Result array of the update operation
	 */
    public SaveResult [] update(SObject[] sObjects)
    {
        UpdateDocument requestDoc = UpdateDocument.Factory.newInstance();
        requestDoc.addNewUpdate().setSObjectsArray(sObjects);
        UpdateResponseDocument responseDoc = this.updateDoc(requestDoc);
        return responseDoc.getUpdateResponse().getResultArray();
    }

	/**
	 * Retrieves a SOAP message document
	 * @param requestDoc A SOAP request document
	 * @return UpdateResponseDocument The retrieved SOAP message document
     * @common:operation
	 */
    public UpdateResponseDocument updateDoc(UpdateDocument requestDoc)
    {
        stdCtrl.setOutputHeaders(refreshHeaders());
        UpdateResponseDocument responseDoc = stdCtrl.update(requestDoc);
        if (m_validateLevel>0) 
            validateXml(requestDoc,responseDoc, "update");
          return responseDoc;
    }

	/**
	  * Updates a Sales Force object - It is a simplified method, user can avoid tedious array coding usin this method 
	  * @param sObjects A base Sales Force object
	  * @return SaveResult Result of the update operation
      * @common:operation
	  */
    public SaveResult updateOne(SObject sObject)
    {
        UpdateDocument requestDoc = UpdateDocument.Factory.newInstance();
        SObject[] sObjects = new SObject[] {sObject}; 
        requestDoc.addNewUpdate().setSObjectsArray(sObjects);
        UpdateResponseDocument responseDoc = this.updateDoc(requestDoc);
        SaveResult[] updateResults = responseDoc.getUpdateResponse().getResultArray();
        return updateResults[0];
    }


	/**
	 * Deletes a Sales Force object array
	 * @param sObjects A base Sales Force object
	 * @return DeleteResult[] Result array of the delete operation
     * @common:operation
	 */
    public  DeleteResult [] delete(String[] ids)
    {
        DeleteDocument requestDoc= DeleteDocument.Factory.newInstance();
        requestDoc.addNewDelete().setIdsArray(ids);                
        DeleteResponseDocument responseDoc = this.deleteDoc(requestDoc);
        return responseDoc.getDeleteResponse().getResultArray();
    }

	/**
	 * Retrieves a SOAP message document
	 * @param requestDoc A SOAP request document
	 * @return DeleteResponseDocument The retrieved SOAP message document
     * @common:operation
	 */
    public DeleteResponseDocument deleteDoc(DeleteDocument requestDoc)
    {
        stdCtrl.setOutputHeaders(refreshHeaders());
        DeleteResponseDocument responseDoc = stdCtrl.delete(requestDoc);
        if (m_validateLevel>0) 
            validateXml(requestDoc,responseDoc, "delete");
        return responseDoc;
    }
       
	/**
	  * Deletes a Sales Force object - It is a simplified method, user can avoid tedious array coding usin this method 
	  * @param sObjects A base Sales Force object
	  * @return DeleteResult Result of the update operation
      * @common:operation
	  */
    public  DeleteResult deleteOne(String id)
    {
        DeleteDocument requestDoc= DeleteDocument.Factory.newInstance();
        String[] ids = new String[] {id};
        requestDoc.addNewDelete().setIdsArray(ids);                
        DeleteResponseDocument responseDoc = this.deleteDoc(requestDoc);
        DeleteResult[] deleteResults = responseDoc.getDeleteResponse().getResultArray();
        return deleteResults[0];
    }

    
    /**
     * Retrieves the list of individual objects that have been deleted within the given timespan for the specified object 
     * @param sObjectType Sales Force object type
     * @param startDate Date where to start
     * @param endDate Date where to end
     * @return GetDeletedResult The result in SOAP object
     * @common:operation
     */
    public GetDeletedResult getDeleted(java.lang.String sObjectType, java.util.Calendar startDate, java.util.Calendar endDate)
    {
        stdCtrl.setOutputHeaders(refreshHeaders());
        GetDeletedResult responseDoc = stdCtrl.getDeleted(sObjectType,startDate,endDate);
        if (m_validateLevel>0) 
            validateXml(null,responseDoc, "getDeleted");
        return responseDoc;        
    }

	/**
	 * Retrieves the list of individual objects that have been updated within the given timespan for the specified object 
	 * @param sObjectType Sales Force object type
	 * @param startDate Date where to start
	 * @param endDate Date where to end
	 * @return GetUpdatedResult The result in SOAP object
     * @common:operation
	 */
    public GetUpdatedResult getUpdated(java.lang.String sObjectType, java.util.Calendar startDate, java.util.Calendar endDate)
    {
        stdCtrl.setOutputHeaders(refreshHeaders());
        GetUpdatedResult responseDoc = stdCtrl.getUpdated(sObjectType,startDate,endDate);
        if (m_validateLevel>0) 
            validateXml(null,responseDoc, "getUpdated");
        return responseDoc;        
    }
    /**
     * Use describeGlobal to obtain the list of available objects for your organization.
     * @return DescribeGlobalResult use this object to navigate through.
     * @common:operation
     */
    public DescribeGlobalResult describeGlobal()
    {
        stdCtrl.setOutputHeaders(refreshHeaders());
        DescribeGlobalResult responseDoc=stdCtrl.describeGlobal();
        if (m_validateLevel>0) 
            validateXml(null,responseDoc, "describeGlobal");
        return responseDoc;
    }

    /**
     * Describes metadata (field list and object properties) for the specified object.
     * @param sObjectType Typwe of the Sales Force object
     * @return DescribeSObjectResult The described object properties
     * @common:operation
     */
    public DescribeSObjectResult describeSObject(String sObjectType)
    {
        stdCtrl.setOutputHeaders(refreshHeaders());
            
        DescribeSObjectResult responseDoc = stdCtrl.describeSObject(sObjectType);
        if (m_validateLevel>0) 
            validateXml(null,responseDoc, "describeSObject");
        return responseDoc;
    }

    /**
     * Retrieves the current system timestamp (GMT) from the sforce Web service.
     * @return Calendar The server timestamp 
     * @common:operation
     */
    public Calendar getServerTimestamp()
    {
        stdCtrl.setOutputHeaders(refreshHeaders());
        GetServerTimestampResult responseDoc = stdCtrl.getServerTimestamp();
        if (m_validateLevel>0) 
            validateXml(null,responseDoc, "getServerTimestamp");
        return responseDoc.getTimestamp();
    }

    /**
     * Retrieves personal information for the user associated with the current session.
     * @return GetUserInfoResult The returned result
     * @common:operation
     */
    public GetUserInfoResult getUserInfo()
    {
        stdCtrl.setOutputHeaders(refreshHeaders());
        GetUserInfoResult responseDoc = stdCtrl.getUserInfo();
        if (m_validateLevel>0) 
            validateXml(null,responseDoc, "getUserInfo");
        return responseDoc;
    }

    /**
     * Use resetPassword to request that the sforce Web service change a user's 
     * password and return the server-generated password string. Use setPassword instead 
     * if you want to set the password to a specific value.
     * @param userId the id of the logged user
     * @return String The password
     * @common:operation
     */
    public String resetPassword(String userId)
    {
        stdCtrl.setOutputHeaders(refreshHeaders());
        ResetPasswordResult resetPasswordResult = stdCtrl.resetPassword(userId);
        return resetPasswordResult.getPassword();
    }

    /**
     * Use setPassword to change a user's password to a value that you specify. 
     * For example, a client application might prompt a user to specify a different password, 
     * and then invoke setPassword to change the user's login password. Use resetPassword 
     * instead if you want to reset the password with an sforce Web service-generated value.
     * Your must be logged in with sufficient access rights to change the password for the specified user
     * @param userId the id of the user
     * @param userId the password of the user
     * @return String The password
     * @common:operation
     */
    public SetPasswordResult setPassword(String userId, String password) 
    {
        stdCtrl.setOutputHeaders(refreshHeaders());
        return stdCtrl.setPassword(userId,password);
    }


	/**
	 * Validates the response and request
	 * @param requestDoc SOAP request document
	 * @param responseDoc SOAP response document
	 */
    private void validateXml(XmlObject requestDoc, XmlObject responseDoc, String sLocation)
    {
        StringBuffer sbOut = new StringBuffer();
        if (m_validateLevel > 1)
            sbOut.append("\n\nValidate called for " + sLocation);
         XmlOptions validateOptions = new XmlOptions();
        ArrayList errorList = new ArrayList();
        validateOptions.setErrorListener(errorList);
        boolean reqErrors=false;
        boolean respErrors=false;
        if ((requestDoc!=null) && !requestDoc.validate(validateOptions) )
        {
            sbOut.append("\nErrors in Request: " + requestDoc.schemaType().toString());
            if (m_validateLevel > 1) formatErrors(errorList, sbOut);
        }
        if ((responseDoc!=null) && !responseDoc.validate(validateOptions) )
        {
            sbOut.append("\nErrors in Response: " + responseDoc.schemaType().toString());
            if (m_validateLevel > 1) formatErrors(errorList, sbOut);
        }
        System.out.println(sbOut.toString());      
     }

    //Header processing functions
    private Element [] refreshHeaders() {
        if (null == m_HdrElemArray)
        {
            //reset the queryOptions and the SaveOptions to their defaults.  These two
            //headers are optional and doing this prevents unintended behavior.
            //The session header is requrired on all calls to we won't re-initialize it
            if (null == m_IBatch) {
                m_qoElem = null;
            }
            
            Vector v = new Vector();
            if (m_shElem != null) v.add(m_shElem);
            if (m_qoElem != null) v.add(m_qoElem);
            if (m_soElem != null) v.add(m_soElem);
            
            m_HdrElemArray = new Element[v.size()];
            for (int i=0;i<m_HdrElemArray.length;i++)
                m_HdrElemArray[i] = (org.w3c.dom.Element) v.get(i);
            
        }
        return m_HdrElemArray;
    }
    
	private void setSessionHeaders(String sessionId)
    {
        SessionHeaderDocument shDoc = SessionHeaderDocument.Factory.newInstance();
        shDoc.addNewSessionHeader().setSessionId(sessionId);
        org.w3c.dom.Document domDoc = (org.w3c.dom.Document)shDoc.newDomNode();
        m_shElem = (org.w3c.dom.Element)domDoc.getFirstChild();
        m_HdrElemArray=null;
        return;
    }

    /**
     * use this call to set the query option programmatically.
     * It lasts until user calls resetQueryOptionsToDefault - default means annotation value, if any,
     * or the system default
     * @param batchSize The new batch size
     * @common:operation
     */
    public void setQueryOptions(int batchSize)
    {
        m_HdrElemArray=null;
        QueryOptionsDocument qoDoc = QueryOptionsDocument.Factory.newInstance();
        qoDoc.addNewQueryOptions().setBatchSize(batchSize);
        org.w3c.dom.Document domDoc = (org.w3c.dom.Document)qoDoc.newDomNode();
        m_qoElem = (org.w3c.dom.Element)domDoc.getFirstChild();
        return;
    }
    
    /**
     * Reset query options to default - default means annotation value, if any,
     * or the system default
     * @common:operation
     */
    public void resetQueryOptionsToDefault() {
        setQueryOptions(m_IBatch.intValue());
    }
        
    /**
     * Use this call to set the save options programmatically.
     * It lasts until user call resetSaveOptionsToDefault - default means annotation value, if any,
     * or the system default
     * @param assignmentRuleId The new assignment rule Id
     * @param autoAssign The new autoAssign parameter. By default is true
     * @common:operation
     */
	public void setSaveOptions(String assignmentRuleId, boolean autoAssign)
    {   
        m_HdrElemArray=null;
        SaveOptionsDocument soDoc = SaveOptionsDocument.Factory.newInstance();
        SaveOptions so = soDoc.addNewSaveOptions(); //soDoc.getSaveOptions().
        if (null != assignmentRuleId) {
            so.setAssignmentRuleId(assignmentRuleId);
        }
        so.setAutoAssign(autoAssign);
        org.w3c.dom.Document domDoc = (org.w3c.dom.Document)soDoc.newDomNode();
        m_soElem = (org.w3c.dom.Element)domDoc.getFirstChild();
        return;
    }
    
    /**
     * Reset query options to default - default means annotation value, if any,
     * or the system default     
     * @common:operation
     */
    public void resetSaveOptionsToDefault() {
        setSaveOptions(m_assignRuleId, m_autoAssign);
    }
    
    /**
     * Use this call to do a task on behalf of an existing session
     * when a separate instance of the wrapper control is involved.
     * example is a process flow called from a page flow.
     * @param requestDoc The login request document
     */
    public void attachToExistingSession(LoginResponseDocument requestDoc)
    {
        LoginResult responseDoc = requestDoc.getLoginResponse().getResult();
        attachToSession(responseDoc);    
    }        
    
    private void attachToSession(LoginResult responseDoc)
    {
        try {     
            setSessionHeaders(responseDoc.getSessionId());
            m_HdrElemArray=null;        
            URL serverURL = new URL(responseDoc.getServerUrl());
            stdCtrl.setEndPoint(serverURL);
        } catch (MalformedURLException e) {
            // do anything here?
            throw new ControlException("Invalid URL returned");
        }
        return ;
       
    }

    private void formatErrors(ArrayList errorList, StringBuffer sbOut)
        {
              for (int i = 0; i < errorList.size(); i++)
              {
                  XmlError error = (XmlError)errorList.get(i);
                  sbOut.append("\n" + error.getMessage());
                  sbOut.append("\nLocation of invalid XML: \nt" + 
                      error.getCursorLocation().xmlText() + "\n");
              }
         }

}