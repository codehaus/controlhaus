<?xml version="1.0"?>

<!--
Copyright 2005 BEA Systems, Inc.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
-->

<!-- =================================================================== -->
<!-- Build file for the JdbcControl project                              -->
<!-- =================================================================== -->
<project name="Jdbc Control Build" default="build" basedir=".">

    <import file="jdbccontrol-imports.xml"/>

    <!-- taskdefs -->
    <taskdef name="apt" classname="org.apache.beehive.controls.runtime.generator.AptTask"
        classpathref="apt.dependency.path" onerror="report"/>
    <taskdef name="assemble" classname="org.apache.beehive.controls.runtime.assembly.AssembleTask"
        classpathref="controls.dependency.path" onerror="report"/>
    <taskdef name="control-jar" classname="org.apache.beehive.controls.runtime.packaging.ControlJarTask"
        classpathref="controls.dependency.path" onerror="report"/>

    <!-- build locations -->
    <property name="project.name" value="Jdbc Control"/>
    <property name="src.dir" location="${jdbcc.home}/src"/>
    <property name="build.classes.dir" location="${jdbcc.build.dir}/classes"/>
    <property name="build.generated.dir" location="${jdbcc.build.dir}/gensrc"/>
    <property name="sqlgrammar.file" value="${src.dir}/org/controlhaus/jdbc/parser/SqlGrammar.jj"/>
    <property name="sqlgrammar.gen.dir" value="${src.dir}/org/controlhaus/jdbc/parser"/>
    <property name="aptmeta.dir" value="${src.dir}/org/controlhaus/jdbc/apt"/>
    <property name="aptmeta.file" value="com.sun.mirror.apt.AnnotationProcessorFactory"/>

    <!-- test locations -->
    <property name="test.src.dir" location="${jdbcc.test.dir}/src"/>
    <property name="test.build.dir" location="${jdbcc.build.dir}/test"/>
    <property name="test.build.classes.dir" location="${test.build.dir}/classes"/>
    <property name="test.build.jars.dir" location="${test.build.dir}/jars"/>
    <property name="test.logs.dir" location="${test.build.dir}/logs"/>
    <property name="test.generated.source.dir" location="${test.build.dir}/gensrc"/>
    <property name="test.derby.dir" location="${test.build.dir}/derbyData"/>

    <!-- test controls -->
    <property name="test.controls.src.dir" location="${test.src.dir}/controls"/>
    <property name="test.controls.classes.dir" location="${test.build.classes.dir}/controls"/>
    <property name="test.controls.generated.source.dir" location="${test.generated.source.dir}/controls"/>
    <property name="testcontrols.jar" location="${test.build.dir}/jars/ctrls.jar"/>

    <!-- test unit tests -->
    <property name="test.units.src.dir" location="${test.src.dir}/units"/>
    <property name="test.units.classes.dir" location="${test.build.classes.dir}/units"/>
    <property name="test.units.generated.source.dir" location="${test.generated.source.dir}/units"/>

    <!-- classpaths -->
    <path id="build.classpath">
        <pathelement location="${build.classes.dir}"/>
        <path refid="controls.dependency.path"/>
        <path refid="xbean.dependency.path"/>
        <path refid="log4j.dependency.path"/>
        <path refid="velocity.dependency.path"/>
        <path refid="tools.dependency.path"/>
    </path>

    <path id="test.classpath">
        <path refid="build.classpath"/>
        <pathelement location="${testcontrols.jar}"/>
        <pathelement location="${jdbcc.jar}"/>
        <path refid="derby.dependency.path"/>
        <path refid="junit.dependency.path"/>
        <path refid="commons.dependency.path"/>
        <pathelement path="${test.units.classes.dir}"/>
    </path>

    <!-- =================================================================== -->
    <!-- build - build the Jdbc Control                                      -->
    <!-- =================================================================== -->
    <target name="build" depends="check-dependencies,sqlgrammar_javacc"
        description="Compiles and builds the database control.">

        <echo message="--------------------------------------------------"/>
        <echo message="       ${project.name} build starting             "/>
        <echo message="--------------------------------------------------"/>

        <mkdir dir="${build.classes.dir}"/>
        <mkdir dir="${build.generated.dir}"/>

        <apt srcdir="${src.dir}"
            destdir="${build.classes.dir}"
            gendir="${build.generated.dir}"
            classpathref="build.classpath"
            compileByExtension="true"
            debug="${compiler.debug}"
            srcExtensions="*.java,*.jcx,*.jcs">
        </apt>

        <mkdir dir="${dist.base.dir}"/>
	<echo message="dist.base.dir is ${dist.base.dir}"/>
	<echo message="jdbcc.home is ${jdbcc.home}"/>
        <jar jarfile="${jdbcc.jar}" basedir="${build.classes.dir}">
            <metainf dir="${aptmeta.dir}">
                <filename name="services/${aptmeta.file}"/>
            </metainf>
        </jar>

        <echo message="--------------------------------------------------"/>
        <echo message="         ${project.name} build complete           "/>
        <echo message="--------------------------------------------------"/>
    </target>


    <!-- =================================================================== -->
    <!-- sqlgrammer - builds the parser using javacc                         -->
    <!-- =================================================================== -->
    <target name="sqlgrammar_javacc">
        <javacc
            target="${sqlgrammar.file}"
            outputdirectory="${sqlgrammar.gen.dir}"
            javacchome="${javacc.home}"
            />
    </target>


    <!-- =================================================================== -->
    <!-- clean - cleans the Jdbc Control                                     -->
    <!-- =================================================================== -->
    <target name="clean" description="Cleans the Jdbc Control build.">
        <!-- TODO: There is a 'velocity.log' file which is created in JDBCCONTROL_HOME
             when the apt task is run. -->
        <delete dir="./build/"/>
    </target>

    <!-- =================================================================== -->
    <!-- test - run the JUnit tests for the Jdbc Control                     -->
    <!-- =================================================================== -->
    <target name="test" depends="build,build-tests" description="Runs the Jdbc Control's unit tests">

        <echo message="--------------------------------------------------"/>
        <echo message="      ${project.name} tests starting"/>
        <echo message="--------------------------------------------------"/>

        <property name="show.output" value="false"/>
        <property name="testout.dir" value="${test.logs.dir}"/>
        <property name="fail" value="true"/>
        <property name="formatter.type" value="xml"/>
        <!--
        <copy file="${junit.jar}" todir="${ant.home}/lib"/>
        -->

        <echo>testout.dir: ${testout.dir}</echo>

        <mkdir dir="${testout.dir}"/>

        <!-- clean out any old derby databases -->
        <delete includeemptydirs="true">
            <fileset dir="${test.derby.dir}" includes="**/*"/>
        </delete>

        <junit printsummary="${fail}" fork="${fail}" haltonfailure="${fail}" haltonerror="${fail}" showOutput="${show.output}">
            <jvmarg value="-ea"/>
            <classpath refid="test.classpath"/>
            <formatter type="${formatter.type}"/>
            <sysproperty key="derby.system.home" value="${test.derby.dir}"/>
            <test name="org.controlhaus.jdbc.units.dbconnection.DBConnectionTest" todir="${testout.dir}"/>
            <test name="org.controlhaus.jdbc.units.sqlparser.SqlParserTest" todir="${testout.dir}"/>
            <test name="org.controlhaus.jdbc.units.results.DBSingleRowResultsTest" todir="${testout.dir}"/>
            <test name="org.controlhaus.jdbc.units.results.DBMultiRowResultsTest" todir="${testout.dir}"/>
            <test name="org.controlhaus.jdbc.units.results.StoredProcsDBResultsTest" todir="${testout.dir}"/>
            <test name="org.controlhaus.jdbc.units.results.JdbcTypesTest" todir="${testout.dir}"/>
            <test name="org.controlhaus.jdbc.units.errors.ErrorPathsTest" todir="${testout.dir}"/>
        </junit>

        <antcall target="make.report">
            <param name="test.report.dir" location="${testout.dir}"/>
        </antcall>

        <echo message="--------------------------------------------------"/>
        <echo message="      ${project.name} tests complete"/>
        <echo message="--------------------------------------------------"/>
    </target>

    <!-- =================================================================== -->
    <!-- dirs - target to create necessary test directories                  -->
    <!-- =================================================================== -->
    <target name="test-dirs">
        <mkdir dir="${test.build.jars.dir}"/>
        <mkdir dir="${test.controls.classes.dir}"/>
        <mkdir dir="${test.units.classes.dir}"/>
        <mkdir dir="${test.controls.generated.source.dir}"/>
        <mkdir dir="${test.units.generated.source.dir}"/>
        <mkdir dir="${test.logs.dir}"/>
        <mkdir dir="${test.derby.dir}"/>
    </target>

    <!-- =================================================================== -->
    <!-- build-tests - builds controls for the unit tests                    -->
    <!-- =================================================================== -->
    <target name="build-tests" depends="test-dirs">

        <echo message="** Generating test Xml Beans **"/>

        <taskdef name="xmlbean" classname="org.apache.xmlbeans.impl.tool.XMLBean"
            classpathref="xbean.dependency.path" onerror="report"/>

        <xmlbean classgendir="${test.controls.classes.dir}"
            classpathref="test.classpath"
            schema="${test.controls.src.dir}/schemas"
            includeJavaRuntime="yes">
        </xmlbean>


        <echo message="** Phase One **"/>

        <apt srcdir="${test.controls.src.dir}"
            gendir="${test.controls.generated.source.dir}"
            destdir="${test.controls.classes.dir}"
            classpathref="test.classpath"
            compileByExtension="true"
            debug="${compiler.debug}"
            srcExtensions="*.jcx,*.jcs,*.java">
        </apt>

        <!-- TODO: Currently not used - should remove?
                <echo message="** Phase Two **"/>
                <apt srcdir="${controls.test.controls}" destdir="${build.beans}" gendir="${build.beansrc}"
                    compileByExtension="true"
                    classpathref="test.classpath"
                    srcExtensions="*.java,*.jcx,*.jcs">
                </apt>
        -->
        <!-- TODO: Currently not used - should remove?
                <echo message="** Controls Assembly **"/>
                <assemble moduleDir="${test.controls.classes.dir}"
                    srcOutputDir="${test.controls.generated.source.dir}"
                    contextFactoryClassname="org.apache.beehive.controls.runtime.assembly.EJBAssemblyContext$Factory">
                    <classpath>
                        <path refid="test.classpath"/>
                    </classpath>
                    <fileset dir="${test.controls.classes.dir}">
                        <include name="**/*.controls.properties"/>
                    </fileset>
                </assemble>
        -->
        <control-jar destfile="${testcontrols.jar}" basedir="${test.controls.classes.dir}"/>

        <!-- now build the unit tests -->
        <echo message="** Phase two **"/>
        <apt srcdir="${test.units.src.dir}"
            destdir="${test.units.classes.dir}"
            gendir="${test.units.generated.source.dir}"
            classpathref="test.classpath"
            compileByExtension="true"
            debug="${compiler.debug}"
            srcExtensions="*.java">
        </apt>
    </target>

    <!-- =================================================================== -->
    <!-- Produce a JUnit test report from the XML results of a test run.    -->
    <!-- Params:                                                             -->
    <!--     test.report.dir == the directory in which the XML test run      -->
    <!--     results exist the HTML for the repots will be produced in       -->
    <!--     ${test.report.dir}/html                                         -->
    <!-- test - run the JUnit tests for the Jdbc Control                     -->
    <!-- =================================================================== -->
    <target name="make.report">
        <echo>test.report.dir: ${test.report.dir}</echo>

        <mkdir dir="${test.report.dir}/html"/>

        <!-- build a report -->
        <junitreport todir="${test.report.dir}/">
            <fileset dir="${test.report.dir}/">
                <include name="TEST-*.xml"/>
            </fileset>
            <report format="noframes" todir="${test.report.dir}/html"/>
        </junitreport>
    </target>

    <target name="usage">
        <java fork="no" classname="org.apache.tools.ant.Main">
            <arg line="-projecthelp"/>
        </java>
    </target>



    <!-- =================================================================== -->
    <!-- download-dependencies - downloads jdbccontrol external dependencies -->
    <!-- from the Maven repository.                                          -->
    <!-- =================================================================== -->
    <target name="download-dependencies" description="Download JdbcControl dependencies from the Maven repository.">

        <mkdir dir="${lib.dir}"/>

        <get src="${junit.maven.url}"
            dest="${junit.jar.dest}"
            usetimestamp="true" ignoreerrors="true"/>

        <get src="${javacc.maven.url}"
            dest="${javacc.jar.dest}"
            usetimestamp="true" ignoreerrors="true"/>

    </target>

    <!-- =================================================================== -->
    <!-- check-dependencies - checks that all necessary libs are present     -->
    <!-- for the build.                                                      -->
    <!-- =================================================================== -->
    <target name="check-dependencies" description="Check external dependencies required for the build.">

        <available file="${lib.dir}" type="dir" property="lib.dir.present"/>

        <fail unless="lib.dir.present">
External libraries not found!

********************************************************************************
********************************************************************************

The jdbcControl.home/lib directory was not found.  Run ant target 'download-dependencies'
to create and populate the lib directory with external dependencies.  External libraries
will be downloaded by Ant from the Maven repository.

   -- OR --

Download files manually and add them to the lib directory.  The following external
libraries are required to build the Jdbc Control:

   ${junit.jar.dest}
   ${javacc.jar.dest}

********************************************************************************
********************************************************************************
        </fail>

        <available file="${junit.jar.dest}" type="file" property="junit.jar.present"/>
        <available file="${javacc.jar.dest}" type="file" property="javacc.jar.present"/>

        <fail unless="junit.jar.present">
********************************************************************************
********************************************************************************

Missing ${junit.jar.dest}.

Run ant target 'download-dependencies' to automatically download from Maven
repostiory or download manually.

********************************************************************************
********************************************************************************
        </fail>
        <fail unless="javacc.jar.present">
********************************************************************************
********************************************************************************

Missing ${javacc.jar.dest}.

Run ant target 'download-dependencies' to automatically download from Maven
repostiory or download manually.

********************************************************************************
********************************************************************************
        </fail>
    </target>

</project>
