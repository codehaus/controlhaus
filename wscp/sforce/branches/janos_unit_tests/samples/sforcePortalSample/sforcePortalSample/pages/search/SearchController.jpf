/*   Copyright 2004 Salesforce.com
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 */

package pages.search;
import com.bea.wlw.netui.pageflow.FormData;
import com.bea.wlw.netui.pageflow.Forward;
import com.bea.wlw.netui.pageflow.PageFlowController;
import com.sforce.soap.enterprise.SearchRecord;
import com.sforce.soap.enterprise.SearchResult;
import com.sforce.soap.enterprise.sobject.Account;
import com.sforce.soap.enterprise.sobject.Contact;
import com.sforce.soap.enterprise.sobject.Lead;
import com.sforce.soap.enterprise.sobject.SObject;
import java.util.ArrayList;
import java.util.Vector;

/**
 * @jpf:controller
 * @jpf:view-properties view-properties::
 * <!-- This data is auto-generated. Hand-editing this section is not recommended. -->
 * <view-properties>
 * <pageflow-object id="pageflow:/pages/search/SearchController.jpf"/>
 * <pageflow-object id="action:begin.do">
 *   <property value="40" name="x"/>
 *   <property value="60" name="y"/>
 * </pageflow-object>
 * <pageflow-object id="action:search.do#pages.search.SearchController.SearchForm">
 *   <property value="540" name="x"/>
 *   <property value="140" name="y"/>
 * </pageflow-object>
 * <pageflow-object id="action-call:@page:search.jsp@#@action:search.do#pages.search.SearchController.SearchForm@">
 *   <property value="336,420,420,504" name="elbowsX"/>
 *   <property value="132,132,132,132" name="elbowsY"/>
 *   <property value="East_1" name="fromPort"/>
 *   <property value="West_1" name="toPort"/>
 * </pageflow-object>
 * <pageflow-object id="page:search.jsp">
 *   <property value="300" name="x"/>
 *   <property value="140" name="y"/>
 * </pageflow-object>
 * <pageflow-object id="forward:path#success#search.jsp#@action:begin.do@">
 *   <property value="76,170,170,264" name="elbowsX"/>
 *   <property value="52,52,132,132" name="elbowsY"/>
 *   <property value="East_1" name="fromPort"/>
 *   <property value="West_1" name="toPort"/>
 *   <property value="success" name="label"/>
 * </pageflow-object>
 * <pageflow-object id="forward:path#success#search.jsp#@action:search.do#pages.search.SearchController.SearchForm@">
 *   <property value="504,420,420,336" name="elbowsX"/>
 *   <property value="132,132,132,132" name="elbowsY"/>
 *   <property value="West_1" name="fromPort"/>
 *   <property value="East_1" name="toPort"/>
 *   <property value="success" name="label"/>
 * </pageflow-object>
 * <pageflow-object id="formbeanprop:pages.search.SearchController.SearchForm#searchParameter#java.lang.String"/>
 * <pageflow-object id="formbean:pages.search.SearchController.SearchForm"/>
 * </view-properties>
 * ::
 */
public class SearchController extends PageFlowController
{
    private org.controlhaus.sforce.sforce3_0Enterprise sForce;

    // Uncomment this declaration to access Global.app.
    // 
    //     protected global.Global globalApp;
    // 

    // For an example of page flow exception handling see the example "catch" and "exception-handler"
    // annotations in {project}/WEB-INF/src/global/Global.app

    private ArrayList results = new ArrayList();

    /**
     * This method represents the point of entry into the pageflow
     * @jpf:action
     * @jpf:forward name="success" path="search.jsp"
     */
    protected Forward begin()
    {
        if(sForce==null){
            sForce = (org.controlhaus.sforce.sforce3_0Enterprise)this.getRequest().getSession().getAttribute("sForce");
        }
        return new Forward("success");
    }

    /**
     * @jpf:action
     * @jpf:forward name="success" path="search.jsp"
     */
    protected Forward search(SearchForm form)
    {   
        results.clear();
        if (form.searchParameter.length() >0) {
            this.search(form.searchParameter);
        }
        else {
            results.add("Search parameter must be at least one character."); 
        }
        return new Forward("success");
    }


    private void search(String searchParam)
    {
        SearchResult sr = null; 
        //This search will look for a particular phone number in Contacts,  
        //Leads and Accounts returning similar information for Contact 
        //and Leads and just the name and phone number for the Accounts 
          sr = sForce.search("find  {" + searchParam +  "}" +  
                "in name fields " +  
                "returning " +  
                "contact(id, phone, firstname, lastname), " +                     
                "lead(id, phone, firstname, lastname), " +  
                "account(id, phone, name)"); 
     
         //Put the results into an array of SearchRecords 
        SearchRecord[] records = sr.getSearchRecordsArray(); 
     
        //Check the length of the returned array of records to see  
        //if the search found anything     
        if (records.length > 0) { 
            //We are going to use vectors to hold the results 
            Vector contacts = new Vector(); 
            Vector leads = new Vector(); 
            Vector accounts = new Vector(); 
            //We will go throught the results and determine what type 
            //of object we found by using instanceof and add each record 
            //to the correct vectory 
            for (int i=0;i<records.length;i++){ 
                SObject record = (SObject)records[i].getRecord(); 
                if (record instanceof Contact) { 
                    contacts.add(record); 
                } else if (record instanceof Lead){ 
                    leads.add(record); 
                } else if (record instanceof Account) { 
                    accounts.add(record); 
                } 
            } 
            //we now have our results sorted into buckets of specific types 
            //so we can report our findings 
            if (contacts.size() > 0) { 
                System.out.println("Found " + new Integer(contacts.size()).toString() 
                + " contacts:"); 
                for (int i=0;i<contacts.size();i++){ 
                    Contact c = (Contact) contacts.get(i); 
                   results.add((c.getFirstName()!=null ? c.getFirstName() : " ")  + " " +
                                (c.getLastName()!=null ? c.getLastName() : " ")  + " - " + 
                                (c.getPhone()!=null ? c.getPhone() :" ")); 
                } 
            } 
            if (leads.size() > 0) { 
                System.out.println("Found " + new Integer(leads.size()).toString() + " leads:"); 
                for (int i=0;i<leads.size();i++){ 
                    Lead l = (Lead) leads.get(i); 
                    results.add((l.getFirstName()!=null ? l.getFirstName() : " ")  + " " +
                                (l.getLastName()!=null ? l.getLastName() : " ")  + " - " + 
                                (l.getPhone()!=null ? l.getPhone() : " "));
                } 
            } 
            if (accounts.size() > 0) { 
                System.out.println("Found " + new Integer(accounts.size()).toString() + " accounts:"); 
                for (int i=0;i<accounts.size();i++){ 
                    Account a = (Account) accounts.get(i); 
                    results.add((a.getName()!=null ? a.getName() : " ")  + " " +
                                (a.getPhone()!=null ? a.getPhone() : " "));
                } 
            } 
        } else { 
            results.add("No records were found for the search."); 
        } 
    }

    public ArrayList getArrayList()
    {
        return this.results;
    }


    /**
     * FormData get and set methods may be overwritten by the Form Bean editor.
     */
    public static class SearchForm extends FormData
    {
        private String searchParameter;

        public void setSearchParameter(String searchParameter)
        {
            this.searchParameter = searchParameter;
        }

        public String getSearchParameter()
        {
            return this.searchParameter;
        }
    }
    
}
