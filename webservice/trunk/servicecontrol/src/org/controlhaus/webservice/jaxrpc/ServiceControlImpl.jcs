/*
 * 
 * Copyright 2004 BEA Systems, Inc.
 * 
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * 
 * Original author: Daryoush Mehrtash
 */
package org.controlhaus.webservice.jaxrpc;

import java.io.Serializable;
import java.lang.reflect.Method;
import java.net.URL;

import org.apache.axis.utils.Messages;
import org.apache.axis.utils.JavaUtils.HolderException;
import org.apache.beehive.controls.api.bean.AnnotationConstraints.AllowExternalOverride;
import org.apache.beehive.controls.api.bean.AnnotationMemberTypes;
import org.apache.beehive.controls.api.bean.ControlImplementation;
import org.apache.beehive.controls.api.bean.Extensible;
import org.apache.beehive.controls.api.context.Context;
import org.apache.beehive.controls.api.context.ControlBeanContext;
import org.apache.beehive.controls.api.properties.PropertySet;

import java.io.File;
import java.io.FileInputStream;
import java.io.InputStream;
import java.lang.reflect.Field;
import java.lang.reflect.Method;
import java.lang.reflect.Type;
import java.net.URL;
import java.rmi.RemoteException;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import java.util.Iterator;

import javax.jws.WebParam;
import javax.jws.soap.SOAPBinding;
import javax.servlet.ServletContext;
import javax.xml.namespace.QName;
import javax.xml.rpc.Call;
import javax.xml.rpc.ParameterMode;
import javax.xml.rpc.Service;
import javax.xml.rpc.ServiceException;
import javax.xml.rpc.ServiceFactory;
import javax.xml.rpc.encoding.TypeMapping;
import javax.xml.rpc.encoding.XMLType;
import javax.xml.rpc.handler.Handler;
import javax.xml.rpc.handler.HandlerInfo;
import javax.xml.rpc.handler.MessageContext;
import javax.xml.rpc.holders.Holder;

import org.apache.beehive.controls.api.context.ControlBeanContext;
import org.apache.beehive.wsm.axis.databinding.SystemTypeLookupService;
import org.apache.beehive.wsm.axis.registration.AxisTypeRegistrar;
import org.apache.beehive.wsm.databinding.BindingLookupService;
import org.apache.beehive.wsm.jsr181.model.BeehiveWsMethodMetadata;
import org.apache.beehive.wsm.jsr181.model.BeehiveWsParameterMetadata;
import org.apache.beehive.wsm.jsr181.model.BeehiveWsTypeMetadata;
import org.apache.beehive.wsm.jsr181.model.wsdl.XmlBeanWSDLProcessor;
import org.apache.beehive.wsm.registration.TypeRegistrar;
import org.apache.log4j.Logger;

import org.controlhaus.webservice.ServiceControl;

import javax.xml.namespace.QName;

import org.w3c.dom.Element;

@ControlImplementation public class ServiceControlImpl implements
        ServiceControl, Extensible, Serializable {
    static Logger logger = Logger.getLogger(ServiceControlImpl.class);

    @Context public ControlBeanContext cbContext;

    BindingLookupService lookupService = null;

    TypeRegistrar registrar = null;

    Service service = null;

    QName portType;

    BeehiveWsTypeMetadata mWSTM;

    URL endPoint = null;

    QName wsdlPort = null;

    String username = null;

    String password = null;

    int timeout = 1000;

    boolean initialized = false;

    public ServiceControlImpl() {
    }

    /**
     * @param method
     * @param args
     * @throws Exception
     */
    public Object invoke(Method method, Object[] args)
            throws NoSuchMethodException, Exception {
        logger.debug("invoke method: " + method.getName());
        initialize();
        String operationName = method.getName();
        String alternateOperationName = getAlternateOperationName(method);
        if (null != alternateOperationName)
            operationName = alternateOperationName;
        BeehiveWsMethodMetadata wmm = findMethodInOM(method, operationName);

        Call call = buildCallObject(method, wmm);
        
        Object[] callArgs = extractHolders(method, wmm, args);
        // // Invoke the operation
        Object res = call.invoke(callArgs);
        fillHolders(method, wmm, call, args);

 

        return res;

    }
    
    // create a new copy of the args where holders value have been extracted.
    private Object[] extractHolders(Method method, BeehiveWsMethodMetadata wmm, Object[] args) {
      
        Object[] res = new Object[args.length];
        Class[] methodParameterTypes = method.getParameterTypes();
        Iterator<BeehiveWsParameterMetadata> it = wmm.getParams().iterator();  // size of the param list must be the size of the args array
        for (int i = 0; i < methodParameterTypes.length; i++) {
            Class javaTypeFromClass = methodParameterTypes[i];
            BeehiveWsParameterMetadata nxtParamMetaData = it.next();
            if((nxtParamMetaData.getWpMode() == WebParam.Mode.INOUT || nxtParamMetaData.getWpMode() == WebParam.Mode.OUT) && 
                    Holder.class.isAssignableFrom(javaTypeFromClass )) {
                try {
                    Holder holder = (Holder)args[i];
                    Field valueField = holder.getClass().getField("value");
                    res[i] = valueField.get(holder);
                } catch (Exception e) {
                  throw new RuntimeException("failed in getting holder value for: " + nxtParamMetaData.getWpName());
                }
                
            } else {
                res[i]=args[i];
            }
        }
       return res;
    }
    
 
    
    // fill the hodlers in the argument array with the result of the call
    private void fillHolders(Method method, BeehiveWsMethodMetadata wmm, Call call, Object[] args) {
        Map outParam = call.getOutputParams();
        
        if(outParam.isEmpty()) return;
        for (Object nxtOutParamKey : outParam.keySet()) {
            logger.info("Got outparam: "
                    + nxtOutParamKey
                    + " value: "
                    + outParam.get(nxtOutParamKey)
                    + " Stuff this into the holders.... TBD!");
        }
        
        Class[] methodParameterTypes = method.getParameterTypes();
        Iterator<BeehiveWsParameterMetadata> it = wmm.getParams().iterator();  // size of the param list must be the size of the args array
        for (int i = 0; i < methodParameterTypes.length; i++) {
            Class javaTypeFromClass = methodParameterTypes[i];
            BeehiveWsParameterMetadata nxtParamMetaData = it.next();
            if((nxtParamMetaData.getWpMode() == WebParam.Mode.INOUT || nxtParamMetaData.getWpMode() == WebParam.Mode.OUT) && 
                    Holder.class.isAssignableFrom(javaTypeFromClass )) {
                try {
                    logger.info("Fill the holder object: " + nxtParamMetaData.getWpName());
                    Holder holder = (Holder)args[i];
                    
                    Object value = outParam.get(new QName(nxtParamMetaData.getWpName()));
                    Field valueField = holder.getClass().getField("value");
                    if (valueField.getType().isPrimitive()) {
                            if (value == null)
                                ;  // Don't need to set anything
                            else
                                valueField.set(holder, value);  // Automatically
                                                                // unwraps
                                                        // value to primitive
                    } else {
                        valueField.set(holder, value);
                    }               
                } catch (Exception e) {
                  throw new RuntimeException("failed in getting holder value for: " + nxtParamMetaData.getWpName());
                }
                
            } else {
                continue;
            }
        }
     }

    /**
     * @param method
     * @param operationName
     * @return
     * @throws ServiceException
     * @throws NoSuchMethodException
     * @throws Exception
     */
    private Call buildCallObject(Method method, BeehiveWsMethodMetadata wmm) throws ServiceException, NoSuchMethodException, Exception {
        
        // TODO:  Later cache the call objects for each method.
        
        Call call = service.createCall();
        if (getWsdlPort() != null) {
            call.setPortTypeName(getWsdlPort());
        }
        if (getUsername() != null) {
            call.setProperty(Call.USERNAME_PROPERTY, getUsername());
        }
        if (getPassword() != null) {
            call.setProperty(Call.PASSWORD_PROPERTY, getPassword());
        }
        call.setOperationName(new javax.xml.namespace.QName(mWSTM
                .getWsTargetNamespace(), wmm.getWmOperationName()));
        // The target endpoint
        logger.debug("endpoint: " + getEndPoint().toExternalForm());
        call.setTargetEndpointAddress(getEndPoint().toExternalForm());
        //       
        // NO TImeout property in the JaxRPC
        // int timeout = serviceControl.getTimeout();
        // if (timeout != 0) {
        // call.setTimeout(new Integer(timeout));
        // }
 
        // set style
        SOAPBinding.Style omStyle = mWSTM.getSoapBinding().getStyle();
        String style;
        if (omStyle == SOAPBinding.Style.DOCUMENT) {
            if (mWSTM.getSoapBinding().getParameterStyle() == SOAPBinding.ParameterStyle.WRAPPED)
                // wrapped implies document also!
                style = "wrapped";
            else
                style = "document";
        } else if (omStyle == SOAPBinding.Style.RPC)
            style = "rpc";
        else
            throw new RuntimeException("Ivalid Binding style: " + omStyle);
        logger.debug("Call style: " + style);
        call.setProperty(Call.OPERATION_STYLE_PROPERTY, style);
        // walk the argument meta data list, register type of parameters, add
        // parameters to the
        // call object
        // TODO: Make sure there is nothing special that needs to be done about
        // holder objects.
        List<BeehiveWsParameterMetadata> omArgMetaDataList = new ArrayList<BeehiveWsParameterMetadata>();
        omArgMetaDataList.addAll(wmm.getParams());
        
        
        Class[] methodParameterTypes = method.getParameterTypes();
        Type[] genericMethodParamTypes = method.getGenericParameterTypes();

        
        if (omArgMetaDataList.size() != methodParameterTypes.length)
            throw new RuntimeException(
                    "Object model and method definition don't match!");
        List argsToSend = new ArrayList<Object>();
        for (int i = 0; i < methodParameterTypes.length; i++) {

            BeehiveWsParameterMetadata nxtArgMetaData = omArgMetaDataList
                    .get(i);
            Class javaTypeFromClass = methodParameterTypes[i];
 
            

            // sure
            // the
            // type
            // is
            // registered
            ParameterMode mode;
            WebParam.Mode omMode = nxtArgMetaData.getWpMode();
            if (omMode == WebParam.Mode.IN)
                mode = ParameterMode.IN;
            else if (omMode == WebParam.Mode.OUT)
                mode = ParameterMode.OUT;
            else if (omMode == WebParam.Mode.INOUT) {
                if( !Holder.class.isAssignableFrom(javaTypeFromClass ))
                    throw new RuntimeException("Holder classes are required for the in/out parameters.");
                mode = ParameterMode.INOUT;
            } else
                throw new RuntimeException("Invalid parameter mode: " + omMode);
            
            // if mode is in or in/out and the type is holder then holder, get its value type 
            QName registeredTypeQName;
      
      if((mode == ParameterMode.OUT || mode == ParameterMode.INOUT) && Holder.class.isAssignableFrom(javaTypeFromClass )) {
          javaTypeFromClass = TypeRegistrar.getHoldersValueClass(genericMethodParamTypes[i]);
       } 
       registeredTypeQName = registrar.registerType(javaTypeFromClass, nxtArgMetaData.getXmlType()); 
            
            if (nxtArgMetaData.isWpHeader()) {
                // TODO: addParameterAsHeader is Axis specific, later abstract
                // out Axis from this implementation
                logger.debug("Argument: "  + nxtArgMetaData.getWpName() + " in method: " + method.getName() + " is send as soap header");
                ((org.apache.axis.client.Call) call).addParameterAsHeader(
                        new QName(nxtArgMetaData.getWpTargetNamespace(),
                                nxtArgMetaData.getWpName()), registeredTypeQName,
                        javaTypeFromClass, mode, mode);
            } else {
                logger.debug("Argument: "  + nxtArgMetaData.getWpName() + " in method: " + method.getName() + " is send in the soap body");
               call.addParameter(nxtArgMetaData.getWpName(), registeredTypeQName,
                        javaTypeFromClass, mode);
            }
        }
        // register the return type
        if (!wmm.isOneWay()) {
            //QName xmlTypeFromWSDL =   new QName(wmm.getWrTargetNamespace(), wmm.getWrName()); //wmm.getXmlReturnType();
            Class javaTypeFromClass = method.getReturnType();
            QName resultsRegisteredTypeQName = registrar.registerType(javaTypeFromClass, wmm.getXmlReturnType());
            call.setReturnType(resultsRegisteredTypeQName);
        } else
            call.setReturnType(registrar.getVoidType());
        // AXIS dependecy... this is needed for the Handlers
        call.setProperty(org.apache.axis.client.Call.JAXRPC_PORTTYPE_NAME,
                portType);
        return call;
    }

    /**
     * @param method
     * @param operationName
     * @throws Exception
     */
    private BeehiveWsMethodMetadata findMethodInOM(Method method,
            String operationName) throws NoSuchMethodException, Exception {

        //  the obejct model doesn't store holders, rather the underlying
        // types, so to get the method
        // we need to get the underlying types. After the loop above the
        // paramTypes have the underlying types
        // for any holders in the arg list.
        
        Type[] genericParamTypes = method.getGenericParameterTypes();
        Class[] paramTypes = method.getParameterTypes();
        for(int i=0; i<paramTypes.length; i++) {
            if(Holder.class.isAssignableFrom(paramTypes[i] )) {
                paramTypes[i]=TypeRegistrar.getHoldersValueClass(genericParamTypes[i]);
            }
        }
        BeehiveWsMethodMetadata wmm = mWSTM
                .getMethod(operationName, paramTypes);
        if (wmm == null) {
            StringBuffer sb = new StringBuffer(
                    "No Jsr181MethodMetadata found for " + operationName + '(');
            boolean first = true;
            for (Class cls : paramTypes) {
                if (first) {
                    first = false;
                } else {
                    sb.append(',');
                }
                sb.append(cls.getName());
            }
            sb.append(')');
            throw new NoSuchMethodException(sb.toString());

        }
        return wmm;
    }

    private synchronized void initialize() throws Exception {
        if (initialized)
            return;

        loadObjectModel();

        QName serviceName = new QName(mWSTM.getWsTargetNamespace(), mWSTM
                .getWsServiceName());
        ServiceFactory factory = ServiceFactory.newInstance();
        service = factory.createService(serviceName);

        HandlerInfo hInfo = new HandlerInfo();
        hInfo.setHandlerClass(HeaderHandler.class);
        portType = new QName(mWSTM.getWsTargetNamespace(), mWSTM.getWsName()); // porttype
                                                                                // name
        service.getHandlerRegistry().getHandlerChain(portType).add(hInfo);

        TypeMapping tm = service.getTypeMappingRegistry()
                .getDefaultTypeMapping();
        lookupService = new SystemTypeLookupService(
                (org.apache.axis.encoding.TypeMapping) tm);
        registrar = new AxisTypeRegistrar(
                (org.apache.axis.encoding.TypeMapping) tm, lookupService);
        configureEndPoint();
        initialized = true;

    }

    private String getAlternateOperationName(Method method) {

        ServiceControl.OperationName opName = cbContext.getMethodPropertySet(
                method, ServiceControl.OperationName.class);
        if (opName != null) {
            return opName.value();
        }
        return null;
    }

    private InputStream getWSDLStream(String pathToWSDL) throws Exception {

        InputStream wsdlStream = null;
        logger.debug("wsdl at:" + pathToWSDL);

        if (pathToWSDL.startsWith("http://") || pathToWSDL.startsWith("file:/")) {
            URL url = new URL(pathToWSDL);
            wsdlStream = url.openStream();
        } else { // it is a local file name

            ServletContext servletContext = cbContext.getService(
                    ServletContext.class, null);
            if (servletContext != null) {
                wsdlStream = servletContext.getResourceAsStream(pathToWSDL);
            } else {
                wsdlStream = cbContext.getControlInterface()
                        .getResourceAsStream(pathToWSDL);
            }

            if (wsdlStream == null) {
                File f = new File(pathToWSDL);
                wsdlStream = new FileInputStream(f);
            }
        }
        return wsdlStream;
    }

    private BeehiveWsTypeMetadata loadObjectModel() throws Exception {

        if (mWSTM == null) {
            ServiceControl.WSDL wsdl = (ServiceControl.WSDL) cbContext
                    .getControlPropertySet(ServiceControl.WSDL.class);

            if (wsdl != null) {
                 logger.debug("read wsdl from: " + wsdl.path());
                InputStream wsdlStream = getWSDLStream(wsdl.path());

                if (wsdlStream != null) {
                    mWSTM = new XmlBeanWSDLProcessor()
                            .createObjectModel(wsdlStream);
                } else {
                    throw new RuntimeException(
                            "No WSDL found at the provided path: "
                                    + wsdl.path());
                }
            } else {
                throw new RuntimeException("No WSDL annotation found.");
            }
        }
        return mWSTM;
    }

    private void configureEndPoint() throws Exception {

        if (null == getEndPoint()) {
            ServiceControl.Location location = (ServiceControl.Location) cbContext
                    .getControlPropertySet(ServiceControl.Location.class);

            if (location != null) {
                setEndPoint(new URL(location.urls()[0]));
            } else {
                throw new RuntimeException("No Location annotation found.");
            }
        }
    }

    /**
     * @return Returns the endPoint.
     */
    public URL getEndPoint() {
        return endPoint;
    }

    /**
     * @param endPoint
     *            The endPoint to set.
     */
    public void setEndPoint(URL endPoint) {
        this.endPoint = endPoint;
    }

    /**
     * @return Returns the password.
     */
    public String getPassword() {
        return password;
    }

    /**
     * @param password
     *            The password to set.
     */
    public void setPassword(String password) {
        this.password = password;
    }

    /**
     * @return Returns the registrar.
     */
    public TypeRegistrar getRegistrar() {
        return registrar;
    }

    /**
     * @param registrar
     *            The registrar to set.
     */
    public void setRegistrar(TypeRegistrar registrar) {
        this.registrar = registrar;
    }

    /**
     * @return Returns the service.
     */
    public Service getService() {
        return service;
    }

    /**
     * @param service
     *            The service to set.
     */
    public void setService(Service service) {
        this.service = service;
    }

    /**
     * @return Returns the timeout.
     */
    public int getTimeout() {
        return timeout;
    }

    /**
     * @param timeout
     *            The timeout to set.
     */
    public void setTimeout(int timeout) {
        this.timeout = timeout;
    }

    /**
     * @return Returns the username.
     */
    public String getUsername() {
        return username;
    }

    /**
     * @param username
     *            The username to set.
     */
    public void setUsername(String username) {
        this.username = username;
    }

    /**
     * @return Returns the wsdlPort.
     */
    public QName getWsdlPort() {
        return wsdlPort;
    }

    /**
     * @param wsdlPort
     *            The wsdlPort to set.
     */
    public void setWsdlPort(QName wsdlPort) {
        this.wsdlPort = wsdlPort;
    }

    /**
     * 
     */
    public void reset() {
        endPoint = null;
        wsdlPort = null;
        username = null;
        password = null;
        timeout = 0;
        HeaderHandler.reset();
    }

    /*
     * (non-Javadoc)
     * 
     * @see org.controlhaus.webservice.ServiceControl#getInputHeaders()
     * 
     * If there are any input header it is stored on my thread's Handler.
     */
    public Element[] getInputHeaders() {
        return HeaderHandler.getInHeaders();
    }

    /*
     * (non-Javadoc)
     * 
     * @see org.controlhaus.webservice.ServiceControl#setOutputHeaders(org.w3c.dom.Element[])
     */
    public void setOutputHeaders(Element[] headers) {
        HeaderHandler.setOutHeaders(headers);
    }
}
