/*
 * InterfaceTestService.jws
 * 
 * Copyright 2004 BEA Systems, Inc.
 * 
 * 
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * 
 * Original author: Jonathan Colwell
 */
package org.controlhaus.webservice;

import javax.jws.WebMethod;
import javax.jws.WebParam;
import javax.jws.WebResult;
import javax.jws.WebService;
import javax.jws.soap.SOAPMessageHandler;
import javax.jws.soap.SOAPMessageHandlers;

import org.apache.axis.MessageContext;
import org.apache.axis.Message;
import org.apache.axis.message.SOAPHeader;
import org.apache.xmlbeans.XmlObject;
import org.apache.xmlbeans.QNameSet;
/*******************************************************************************
 * 
 *
 * @author Jonathan Colwell
 */
@WebService
@SOAPMessageHandlers({
    @SOAPMessageHandler
        (className = "org.controlhaus.webservice.SOAPHeaderHandler",
         headers = {"shh"})})
public class InterfaceTestService {

    @WebMethod
    public boolean isReady() {
        return true;
    }

    @WebMethod
    public long timeOut(@WebParam(name = "waitTime") long waitTime) {
        long nanos = System.nanoTime();
        try {
            Thread.sleep(waitTime);
        }
        catch (InterruptedException ie) {}
        return (System.nanoTime() - nanos)/1000000L;
    }

    @WebMethod
    public int headOn() throws Exception {
        MessageContext mc = MessageContext.getCurrentContext();
        Message m = mc.getRequestMessage();
        int headersReceived = -99;
        if (m != null) {
            SOAPHeader sh = (SOAPHeader)m.getSOAPPart().getEnvelope()
                .getHeader();
            if (sh != null) {
                /*  XmlObject xObj = XmlObject.Factory.parse(sh);
                System.out.println(xObj);
                headersReceived = xObj.selectChildren(QNameSet.ALL).length;
                */
                headersReceived = sh.getChildren().size();
            }
        }
        return headersReceived;
    }
}
