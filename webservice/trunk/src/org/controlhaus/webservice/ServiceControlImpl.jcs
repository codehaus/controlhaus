/*
 * ServiceControlImpl.jcs
 * 
 * Copyright 2004 BEA Systems, Inc.
 * 
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * 
 * Original author: Jonathan Colwell
 */
package org.controlhaus.webservice;

import java.lang.reflect.Method;
import java.io.File;
import java.io.FileInputStream;
import java.io.InputStream;
import java.io.Serializable;
import java.net.URL;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.servlet.ServletContext;
import javax.xml.namespace.QName;

import org.apache.beehive.controls.api.bean.AnnotationConstraints.AllowExternalOverride;
import org.apache.beehive.controls.api.bean.AnnotationMemberTypes;
import org.apache.beehive.controls.api.bean.ControlImplementation;
import org.apache.beehive.controls.api.bean.Extensible;
import org.apache.beehive.controls.api.context.Context;
import org.apache.beehive.controls.api.context.ControlBeanContext;
import org.apache.beehive.controls.api.properties.PropertySet;

import org.apache.beehive.wsm.jsr181.model.Jsr181TypeMetadata;
import org.apache.beehive.wsm.jsr181.wsdl.WSDLProcessor;
import org.apache.beehive.wsm.jsr181.wsdl.XmlBeanWSDLProcessor;

import org.apache.xmlbeans.XmlCursor;
import org.apache.xmlbeans.XmlException;
import org.apache.xmlbeans.XmlObject;

import org.controlhaus.webservice.invocation.WebServiceInvocationTarget;
import org.controlhaus.webservice.invocation.AxisInvocationTarget;

import org.w3c.dom.Document;
import org.w3c.dom.Element;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;

/*******************************************************************************
 * 
 *
 * @author Jonathan Colwell
 */

@ControlImplementation
public class ServiceControlImpl
    implements PluggableServiceControl, Extensible, Serializable
{

    @Context 
    public ControlBeanContext mContext;

    //private String mServiceName;

    private int mTimeout;
    private QName mPort;
    private String mUsername;
    private String mPassword;
    private URL mEndPoint;
    private WebServiceInvocationTarget mWebServiceInvoker;
    private Jsr181TypeMetadata mWSTM;
    private XmlObject mInHead;
    private XmlObject mOutHead;

    public ServiceControlImpl() {
        super();
    }

    public void setEndPoint( URL url ) {
        mEndPoint = url;
    }

    public URL getEndPoint() {
        return mEndPoint;
    }

    public void setWsdlPort( QName wsdlPortName ) {
        mPort = wsdlPortName;
    }

    public QName getWsdlPort() {
        return mPort;
    }

    public void setUsername( String username ) {
        mUsername = username;
    }

    public void setPassword( String password ) {
        mPassword = password;
    }

    public String getUsername() {

        return mUsername;
    }

    public String getPassword() {
        return mPassword;
    }

    public Element[] getInputHeaders() {
        XmlObject headers = getInputHeadersAsXmlBean();
        
        return xObj2Elements(headers);
    }

    public void setOutputHeaders( Element[] headers ) {
        try {
            setOutputHeadersAsXmlBean(elements2XmlObject(headers));
        }
        catch (XmlException xe) {
            // FIXME jcolwell@bea.com 2004-Nov-15 -- do something useful with
            // the exception.  
            xe.printStackTrace();
        }
    }

    public Element[] xObj2Elements(XmlObject xObj) {

        if (xObj != null) {
            XmlCursor xCur = xObj.newCursor();
            if (xCur.toFirstContentToken() == XmlCursor.TokenType.START) {
                List<Element> elementList = new ArrayList<Element>();
                do {
                    Node n = xCur.getDomNode();
                    if (n.getNodeType() == Node.ELEMENT_NODE) {
                        elementList.add((Element)n);
                    }
                }
                while (xCur.toNextSibling());
                return elementList.toArray(new Element[elementList.size()]);
            }
        }
        return new Element[0];
    }

    public XmlObject elements2XmlObject(Element[] elements) throws XmlException {
        
        if (elements != null && elements.length > 0) {

            XmlObject xObj = XmlObject.Factory.newInstance();

            for (Element elem : elements) {

                insertChild(xObj, XmlObject.Factory.parse(elem));
            }
            return xObj;
        }
        return null;
    }

    public boolean insertChild(XmlObject parent, XmlObject child) {
        XmlCursor kidCursor = child.newCursor();
        XmlCursor parentCursor = parent.newCursor();
        parentCursor.toFirstContentToken();
        kidCursor.toNextToken();
        return kidCursor.copyXml(parentCursor);
    }

    public XmlObject getInputHeadersAsXmlBean() {

        return mInHead;
    }

    public void setInputHeadersAsXmlBean(XmlObject headers) {

        mInHead = headers;
    }


    public XmlObject getOutputHeadersAsXmlBean() {

        return mOutHead ;
    }


    public void setOutputHeadersAsXmlBean(XmlObject headers) {
        
        mOutHead = headers;
    }

    public void setTimeout(int timeout) {

        mTimeout = timeout;
    }


    public int getTimeout() {

        return mTimeout;
    }

    public void reset() {
        
        mTimeout = 0;
        mPort = null;
        mUsername = null;
        mPassword = null;
        mEndPoint = null;
        mWebServiceInvoker = null;
        mWSTM = null;
        mInHead = null;
        mOutHead = null;
    }


    public Object invoke(Method method, Object[] args) throws Throwable {

        Jsr181TypeMetadata wstm = loadObjectModel();

        String alternateOperationName = getAlternateOperationName(method);
       
        configureEndPoint();

        return getInvocationTarget().invokeWebService(method,
                                                      args,
                                                      this,
                                                      wstm,
                                                      alternateOperationName);
    }

    private String getAlternateOperationName(Method method) {

        ServiceControl.OperationName opName = 
            mContext.getMethodPropertySet(method, 
                                          ServiceControl.OperationName.class);
        if (opName != null) {
            return opName.value();
        }
        return null;
    }

    private InputStream getWSDLStream(String pathToWSDL) throws Exception {

        // FIXME jcolwell@bea.com 2004-Dec-02 -- 
        // call getResourceAsStream() directly once the ControlBeanContext
        // is fixed to load resources.
        System.out.println("WSDL path: " + pathToWSDL);

        InputStream wsdlStream = null;
        
        ServletContext sc = mContext.getService(ServletContext.class, null);
        if (sc != null) {
            wsdlStream = sc.getResourceAsStream(pathToWSDL);
        }
        
        if (wsdlStream == null) {
            File f = new File(pathToWSDL);
            boolean readable = f.canRead();
            System.out.println("WSDL file absolute path: "
                               + f.getAbsolutePath() 
                               + (readable
                                  ? " and it's readable"
                                  : " but it's not there or not readable"));
            if (!readable) {
                if (pathToWSDL.startsWith("/") || pathToWSDL.startsWith("\\")) {
                    pathToWSDL = pathToWSDL.substring(1);
                }
                else {
                    pathToWSDL = '/' + pathToWSDL;
                }

                f = new File(pathToWSDL);
                readable = f.canRead();
                System.out.println("WSDL file absolute path: "
                                   + f.getAbsolutePath() 
                                   + (readable
                                      ? " and it's readable"
                                      : " but it's not there or not readable"));
            }
            wsdlStream = new FileInputStream(f);
        }
        return wsdlStream;
    }

    private Jsr181TypeMetadata loadObjectModel() throws Exception {

        if (mWSTM == null) {
            ServiceControl.WSDL wsdl = (ServiceControl.WSDL)
                mContext.getControlPropertySet(ServiceControl.WSDL.class);
           
            if (wsdl != null) {
                // FIXME jcolwell@bea.com 2004-Nov-05 -- 
                // not worrying about the service name until the WSDLProcessor 
                // supports WSDLs with more than one service.
                // mServiceName = wsdl.service();
               
                System.out.println(wsdl.path());
                InputStream wsdlStream = getWSDLStream(wsdl.path());
                
                if (wsdlStream != null) {
                    PluggableServiceControl.WSDLProcessorImpl wsdlProcImpl = 
                        (PluggableServiceControl.WSDLProcessorImpl)
                        mContext.getControlPropertySet(PluggableServiceControl
                                                       .WSDLProcessorImpl.class);
           

                    WSDLProcessor procInstance;
                    if (wsdlProcImpl != null) {
                        procInstance = wsdlProcImpl.processor()
                            .newInstance();
                    }
                    else {
                        procInstance = new XmlBeanWSDLProcessor();
                    }
                    mWSTM = procInstance.createObjectModel(wsdlStream);
                }
                else { 
                    throw new NullPointerException
                        ("No WSDL found at the provided path: " 
                         + wsdl.path());
                }
            }
            else {
                throw new NullPointerException("No WSDL annotation found.");
            }
        }

        return mWSTM;
    }


    private void configureEndPoint() throws Exception {

        if (null == getEndPoint()) {

            ServiceControl.Location location = (ServiceControl.Location)
                mContext.getControlPropertySet(ServiceControl.Location.class);
           
            if (location != null) {
                // FIXME jcolwell@bea.com 2004-Nov-05 -- look through the URLs
                // for the first one using http.
                setEndPoint(new URL(location.urls()[0]));
            }
            else {
                throw new NullPointerException("No Location annotation found.");
            }
        }
    }

    private WebServiceInvocationTarget getInvocationTarget() throws Exception {

        if (null == mWebServiceInvoker) {

            PluggableServiceControl.InvocationTargetImpl invocationTarget = 
                mContext.getControlPropertySet(PluggableServiceControl
                                               .InvocationTargetImpl.class);
            mWebServiceInvoker = invocationTarget.invoker().newInstance();
            if (null == mWebServiceInvoker) {
                mWebServiceInvoker = new AxisInvocationTarget();
            }
        }        
        return mWebServiceInvoker;
    }
}

